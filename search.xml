<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>基于 Ubuntu 搭建 Seafile 个人网盘</title>
      <link href="/2017/07/24/set-up-seafile-network-storage-via-ubuntu/"/>
      <content type="html"><![CDATA[<h2 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h2><ul><li>域名注册</li><li>域名解析</li></ul><p>域名购买完成后, 需要将域名解析到云主机上，通 <code>ping</code> 命令检查域名是否生效，如：</p><pre><code>ping www.yourdomain.com</code></pre><p>如果 <code>ping</code> 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><blockquote><p>注意替换下面命令中的 <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> 为您自己的注册的域名</p></blockquote><h2 id="安装-Seafile-服务器"><a href="#安装-Seafile-服务器" class="headerlink" title="安装 Seafile 服务器"></a>安装 Seafile 服务器</h2><p><strong>安装依赖环境</strong></p><p>在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：</p><pre><code>sudo apt-get updatesudo apt-get install mysql-server</code></pre><p>使用以下命令安装 Python 相关依赖：</p><pre><code>sudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3</code></pre><p>安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该 [密码] 以供后面步骤使用。</p><p><strong>为 Seafile 创建一个用户</strong></p><p>创建 Seafile 用户，使用它运行 Seafile 服务：</p><pre><code>sudo useradd -m -s /bin/bash seafile</code></pre><p>为该用户设置密码：</p><pre><code>sudo passwd seafile</code></pre><p><strong>下载Seafile</strong></p><p>切换到新用户，需要输入你刚才为seafile用户设置的密码：</p><pre><code>su - seafile</code></pre><p>切换目录：</p><pre><code>cd ~</code></pre><p>这里可以查看获取最新 Seafile 下载链接，参考以下命令进行下载。</p><pre><code>wget http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz</code></pre><p>解压:</p><pre><code>tar -xzf seafile-server_*mv seafile-server-*/ seafile-server/</code></pre><p><strong>配置 Seafile</strong></p><p>运行Seafile设置脚本，并回答预设问题：</p><pre><code>cd seafile-server*./setup-seafile-mysql.sh</code></pre><p>执行过程输入参数如下图：</p><p>其中：</p><p>[ This server’s ip or domain ] 字段输入教程第一步申请的域名或者IP地址（&lt;您的 CVM IP 地址&gt;）。<br>mysql 的 [ root password ] 字段输入数据库密码。<br>其他字段一路回车使用默认值。</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-f9c351cd604618ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>启动 Seafile</strong></p><pre><code>./seafile.sh start./seahub.sh start</code></pre><p>执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 <a href="mailto:`admin@qcloudlab.wang" target="_blank" rel="noopener">`admin@qcloudlab.wang</a>`。</p><p>[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如  <code>admin_Password</code> ：</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-a53a5ff6fc6678e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>大功告成！恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。</p><ul><li>可以通过 IP 访问网盘：http://&lt;您的域名&gt;:8000</li><li>可以通过域名访问网盘：如 <a href="http://www.yourdomain.com:8000" target="_blank" rel="noopener">http://www.yourdomain.com:8000</a> ，其中 <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> 替换为您注册的域名</li></ul>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Seafile </tag>
            
            <tag> 网盘 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于 CentOS 搭建 Seafile 个人网盘</title>
      <link href="/2017/07/24/set-up-seafile-network-storage-via-centos/"/>
      <content type="html"><![CDATA[<h2 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h2><ul><li>域名注册</li><li>域名解析</li></ul><p>域名购买完成后, 需要将域名解析到云主机上，通 <code>ping</code> 命令检查域名是否生效，如：</p><pre><code>ping www.yourdomain.com</code></pre><p>如果 <code>ping</code> 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><blockquote><p>注意替换下面命令中的 <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> 为您自己的注册的域名</p></blockquote><h2 id="安装-Seafile"><a href="#安装-Seafile" class="headerlink" title="安装 Seafile"></a>安装 Seafile</h2><p><strong>安装依赖环境</strong></p><p>使用 yum 安装 Python 及 MySQL：</p><pre><code>yum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server</code></pre><p>启动 MariaDB 服务：</p><pre><code>sudo systemctl start mariadb.servicesudo systemctl enable mariadb.service</code></pre><p>配置 MySQL：</p><pre><code>/usr/bin/mysql_secure_installation</code></pre><p>配置过程输入参数如截图所示，其中 <code>New password</code> 和 <code>Re-enter new password</code> 字段都为你自己设置的密码 <code>yourmysqlpassword</code>，其他字段一路回车使用默认值：</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-3ad5bb73b5da05f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>安装 Seafile</strong></p><p>下载 Seafile 安装包：</p><pre><code>wget http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_x86-64.tar.gz</code></pre><p>解压 Seafile 安装包：</p><pre><code>tar -zxvf seafile-server_6.1.1_x86-64.tar.gz</code></pre><p>安装 Seafile 安装包：</p><pre><code>sudo mkdir -p /opt/seafile/installedsudo mv seafile-server_6.1.1_x86-64.tar.gz /opt/seafile/installedsudo mv seafile-server-6.1.1/ /opt/seafilecd /opt/seafile/seafile-server-6.1.1sudo ./setup-seafile-mysql.sh</code></pre><p>执行过程输入参数如截图所示，[server name] 字段输入 <code>Seafile</code>，[ This server’s ip or domain ] 字段输入教程第一步申请的域名，[ 1 or 2 ] 字段选择 1，mysql 的 [ root password ] 字段输入你自己设置的密码 <code>yourmysqlpassword</code>，其他字段一路回车使用默认值：</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-bafb4a1b2054c922.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>启动 Seafile 及修改防火墙规则</strong></p><p>启动 Seafile</p><pre><code>sudo ./seafile.sh startsudo ./seahub.sh start</code></pre><p>执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的 <code>邮箱帐号</code>，[ admin password ] 和 [ admin password again ] 设置为登录网盘的 <code>密码</code> ：</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-e04142f8a9cfb762.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>修改防火墙规则（可选）</p><pre><code>sudo firewall-cmd --zone=public --permanent --add-port=8082/tcpsudo firewall-cmd --zone=public --permanent --add-port=8000/tcpsudo firewall-cmd --reload</code></pre><p>大功告成！你的 Seafile 已经部署完成，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。</p><ul><li>可以通过 Ip 访问网盘：http://&lt;你的ip&gt;:8000</li><li>也可以通过域名访问网盘：如 <a href="http://www.yourdomain.com:8000" target="_blank" rel="noopener">http://www.yourdomain.com:8000</a> ，其中 <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> 替换为您注册的域名</li></ul>]]></content>
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Seafile </tag>
            
            <tag> 网盘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Win10+Linux 双系统方案中的 ‘坑’</title>
      <link href="/2017/07/09/the-hole-in-pc-with-win10-and-linux/"/>
      <content type="html"><![CDATA[<h2 id="第一坑：双系统时间不一致"><a href="#第一坑：双系统时间不一致" class="headerlink" title="第一坑：双系统时间不一致"></a>第一坑：双系统时间不一致</h2><p>首先科普一下 <a href="http://www.cnblogs.com/tosee/p/5538007.html" target="_blank" rel="noopener">GMT 和 UTC</a></p><p>Windows 和 Linux 计算系统时间的默认方法是不同的：</p><ul><li>Windows 把 <code>BIOS 时间</code> 当做 <code>系统时间</code>;</li><li>Linux 把 <code>BIOS 时间</code> 当做 <code>UTC 时间</code>，而北京是东八时区，所以系统显示的时间是 UTC+8，比正常时间快了 8 小时</li></ul><p>解决方法有下面两种：</p><ul><li>让 Linux 把 BIOS 时间 当做正常时间</li></ul><pre class=" language-shell"><code class="language-shell">sudo gedit /etc/default/rcS# 把 UTC=yes 改为 no</code></pre><ul><li>让 Windows 把 BIOS 时间 当做 UTC 时间</li></ul><pre><code>// 在 cmd 中输入：Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1</code></pre><p><a href="http://blog.csdn.net/misiter/article/details/7767146" target="_blank" rel="noopener">其他方法</a></p><h2 id="第二坑：Win-10-关机后-Linux-对磁盘不可写"><a href="#第二坑：Win-10-关机后-Linux-对磁盘不可写" class="headerlink" title="第二坑：Win 10 关机后 Linux 对磁盘不可写"></a>第二坑：Win 10 关机后 Linux 对磁盘不可写</h2><p>从 win 8 开始，windows 的开机速度变得飞快，其原理就是 <code>关机 类似于 休眠</code>，关机前关掉所有程序，将下次开机时需要的数据存到硬盘上，开机时只需将硬盘中的数据读取到内存中。</p><p>这样做就有一个坑，Windows 关机后再进入 Linux 系统后，硬盘的 <code>非 Linux 所在分区</code> 表现为 <code>只读状态</code>，无法写入、删除数据。</p><p>在百度上也没找到这个问题，个人认为是 Windows 的 <code>关机即休眠</code> 原理造成的，于是我做了一个测试：</p><blockquote><p>在 Windows 重启到 BIOS 界面时立即进入 Linux 系统，这时发现 Linux 对所有磁盘的读写已经正常了</p></blockquote><p>所以这个问题可以这样解决：</p><ul><li>在 Windows 完全关机的状态下再进入 Linux，这种方法每次进 Linux 系统都比较麻烦</li><li>在 Windows 电源选项中关掉 <code>快速启动</code>，这种方法会使得 Windows 开机变慢</li></ul>]]></content>
      
      <categories>
          
          <category> Default </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> linux </tag>
            
            <tag> 双系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 使用 http(s) 协议时该如何保存用户名和密码</title>
      <link href="/2017/05/30/git-https-save-username-and-password/"/>
      <content type="html"><![CDATA[<p>git 使用 http(s) 方式每次都要输入密码，下面有几种方法可以解决输入密码的困扰又能享受https带来的极速</p><ul><li>暂时记住密码（默认15分钟）：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global credential.helper cache<span class="token comment" spellcheck="true"># 如果想自己设置时间，可以这样做：</span><span class="token function">git</span> config credential.helper <span class="token string">'cache --timeout=3600'</span><span class="token comment" spellcheck="true"># 这样就设置一个小时之后失效</span></code></pre><ul><li>长期存储密码：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global credential.helper store</code></pre><ul><li>在远程地址中加上密码（推荐）</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin http://username:password@github.com/username/repo.git</code></pre><p>修改已有仓库的地址可以这样做</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token function">git</span> remote add origin http://username:password@github.com/username/repo.git</code></pre>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> https </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法练习：数字重组</title>
      <link href="/2017/05/30/algorithm-practice-digit-recombination/"/>
      <content type="html"><![CDATA[<h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>输入一个N位高精度的正整数，去掉其中任意K个数字后剩下的数字按原左右次序组成一个新的正整数。写算法对给定的N和K，寻找一种方案使得剩下的数字组成的新数最小。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>N、K以及一个N位高精度的正整数</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>剩下的数字组成的最小新数</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>20 5<br>89382735464109218767</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>235464109218767</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token function">find_min</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>pmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> min<span class="token punctuation">;</span>    min<span class="token operator">=</span>c<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> pmin<span class="token operator">=</span>left<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span> <span class="token punctuation">{</span> min<span class="token operator">=</span>c<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> pmin<span class="token operator">=</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> pmin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> tag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">find_min</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> tag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span>i<span class="token number">-1</span><span class="token punctuation">,</span> pmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        tag<span class="token operator">=</span>pmin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数字 </tag>
            
            <tag> 重组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js 变量检查（防止sql注入）</title>
      <link href="/2017/05/21/js-parameter-check-avoid-sql-inject/"/>
      <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @param 可能是对象、数组、字符串 * 检查param中是否含有空白符、引号等，如果有则自动删除这些符号返回一个合法的数据 */</span><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> param <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> param<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span>                param<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> param<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>\s<span class="token operator">|</span>'<span class="token operator">|</span><span class="token string">"|%|\?/g, "</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> param <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        param <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>\s<span class="token operator">|</span>'<span class="token operator">|</span><span class="token string">"|%|\?/g, "</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> param<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//test sample</span>o1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token string">"2 3"</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span><span class="token string">"'user' or 1=1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>o2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"double kill"</span><span class="token punctuation">,</span> <span class="token string">"triple    kill"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>o3 <span class="token operator">=</span> <span class="token string">"i love    'u'\n"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>b<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>o1 <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>b<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o2 <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">;</span>o3 <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 变量检查 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1465 子集和数问题</title>
      <link href="/2017/05/18/ahnu-oj1465/"/>
      <content type="html"><![CDATA[<p>子集和数问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:933 Accepted:282</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>已知n个不同正整数wi，0&lt;=i&lt;=n-1，的集合，求该集合的所有满足条件的子集，使得每个子集中的正整数之和等于另一个给定的正整数M。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入n和M的值，第二行输入n个不同的正整数wi（i=0，…，n）。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>如果有答案，则输出所有满足条件的子集（用固定长度n-元组xi表示，xi=0或1，i=0，…，n）。如果没有答案，则输出“no solution!”。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>4 31<br>11 13 24 7</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>1 1 0 1<br>0 0 1 1</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SumOfSub</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> k<span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0 "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>        <span class="token function">SumOfSub</span><span class="token punctuation">(</span>s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">-</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span>r<span class="token operator">-</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">>=</span>m <span class="token operator">&amp;&amp;</span> s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">SumOfSub</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">-</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SumOfSub</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        r<span class="token operator">+</span><span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>m <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>        <span class="token function">SumOfSub</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> M<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> M<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                t<span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">SumOfSub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">,</span> M<span class="token punctuation">,</span> w<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no solution!"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1464 N皇后问题</title>
      <link href="/2017/05/18/ahnu-oj1464/"/>
      <content type="html"><![CDATA[<p>NQeens</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:455 Accepted:288</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>n-皇后问题要求在一个n*n的棋盘上放置n个皇后，使得它们彼此不受“攻击”。观察表明n-皇后问题的解存在垂直对偶性，请修改教材算法NQeens，令x[0]=1，2，……，[n/2]，使得只求其中不对称的那些解。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>n的值。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>不对称的那些解。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>4</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>1 3 0 2</p><h5 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h5><p>4-皇后全部的解为<br>1 3 0 2<br>2 0 3 1</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">Place</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">||</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">abs</span><span class="token punctuation">(</span>j<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">NQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Place</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                    cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token function">NQueens</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">NQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">NQueens</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">NQueens</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1463 最长公共子序列问题</title>
      <link href="/2017/05/18/ahnu-oj1463/"/>
      <content type="html"><![CDATA[<p>最长公共子序列问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:846 Accepted:280</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>给定2个序列X={x1,x2,…,xm}和Y={y1,y2,…,yn}，找出X和Y的最长公共子序列。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入序列X，第二行输入序列Y。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>X和Y的最长公共子序列的长度。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>abcbdab<br>bdcaba</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>4</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LCS</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LCS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">LCSLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>c<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>LCS<span class="token operator">::</span><span class="token function">LCS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    m <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span> <span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span> x<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span> <span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span> y<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        y<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> LCS<span class="token operator">::</span><span class="token function">LCSLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LCS lcs<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> lcs<span class="token punctuation">.</span><span class="token function">LCSLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1462 矩阵连乘问题</title>
      <link href="/2017/05/18/ahnu-oj1462/"/>
      <content type="html"><![CDATA[<p>矩阵连乘问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:455 Accepted:306</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>给定n个矩阵{A0,A1,…,An-1}， 其中Ai，i=0,…,n-1的维数为pi*pi+1，并且Ai与Ai+1是可乘的。考察这n个矩阵的连乘积A0A1…An-1，由于矩阵乘法满足结合律，所以计算矩阵的连乘可有许多不同的计算次序。矩阵连乘问题是确定计算矩阵连乘积的计算次序，使得按照这一次序计算矩阵连乘积，需要的“数乘”次数最少。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入n的值，第二行输入n个矩阵的维数pi（i=0，…，n）。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>最少乘法次数。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>6<br>30 35 15 5 10 20 25</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>15125</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MatrixChain</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MatrixChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">MChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int LookupChain();</span>    <span class="token comment" spellcheck="true">//void Traceback();</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>s<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int LookupChain(int i, int j);</span>    <span class="token comment" spellcheck="true">//void Traceback(int i, int j);</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> MatrixChain<span class="token operator">::</span><span class="token function">MChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> r<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">=</span>i<span class="token operator">+</span>r<span class="token number">-1</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token operator">=</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MatrixChain mc<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> mc<span class="token punctuation">.</span><span class="token function">MChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1461 多段图问题</title>
      <link href="/2017/05/18/ahnu-oj1461/"/>
      <content type="html"><![CDATA[<p>多段图问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:405 Accepted:269</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>多段图G=(V,E)是一个带权有向图，它具有如下特性：图中的结点被划分成k&gt;=2个互不相交的子集Vi，1&lt;=i&lt;=k。其中V1和Vk分别只有一个结点，V1包含源点（source）s，Vk包含汇点（sink）t。对所有边属于E，多段图要求若u属于Vi，则v属于Vi＋1，1&lt;=i&lt; k，每条边的权值为c(u,v)。从s到t的路径长度是这条路径上边的权值之和，多段图问题（multistage graph problem）是求从s到t的一条长度最短的路径。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入结点个数n和边的个数m，以下m行输入各有向边的两个结点u、v及该边上的代价。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>从s到t的最短的路径的长度。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>4 4<br>0 1 5<br>0 2 1<br>1 3 3<br>2 3 10</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>8</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> ENode <span class="token punctuation">{</span>    <span class="token keyword">int</span> adjVex<span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    ENode <span class="token operator">*</span>nextArc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">FMultiGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span><span class="token punctuation">;</span>            ENode <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>adjVex <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>nextArc<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">protected</span><span class="token operator">:</span>    ENode <span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> vSize<span class="token punctuation">,</span> eSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Graph<span class="token operator">::</span><span class="token function">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vSize<span class="token operator">=</span>v<span class="token punctuation">;</span> eSize<span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> u<span class="token punctuation">;</span>    ENode <span class="token operator">*</span>p<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token keyword">new</span> ENode<span class="token operator">*</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>eSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token keyword">new</span> ENode<span class="token punctuation">;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> p<span class="token operator">-</span><span class="token operator">></span>adjVex <span class="token operator">>></span> p<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">;</span>        p<span class="token operator">-</span><span class="token operator">></span>nextArc <span class="token operator">=</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> Graph<span class="token operator">::</span><span class="token function">FMultiGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token operator">*</span>cost<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token operator">*</span>d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span> v<span class="token punctuation">,</span> min<span class="token punctuation">;</span>    cost<span class="token punctuation">[</span>vSize<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> d<span class="token punctuation">[</span>vSize<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>vSize<span class="token number">-2</span><span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> <span class="token number">32768</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ENode <span class="token operator">*</span>r<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> r<span class="token punctuation">;</span> r<span class="token operator">=</span>r<span class="token operator">-</span><span class="token operator">></span>nextArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            v<span class="token operator">=</span>r<span class="token operator">-</span><span class="token operator">></span>adjVex<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">+</span> cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> r<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">+</span> cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                q <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">;</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    c<span class="token operator">=</span>cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> cost<span class="token punctuation">;</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> d<span class="token punctuation">;</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span> e<span class="token punctuation">;</span>    cin <span class="token operator">>></span> v <span class="token operator">>></span> e<span class="token punctuation">;</span>    Graph <span class="token function">g</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//g.test();</span>    cout <span class="token operator">&lt;&lt;</span> g<span class="token punctuation">.</span><span class="token function">FMultiGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1460 最小代价生成树</title>
      <link href="/2017/05/18/ahnu-oj1460/"/>
      <content type="html"><![CDATA[<p>Minimum-Cost Spanning Tree</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:512 Accepted:237</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>一个无向连通图的生成树是一个极小连通子图，它包括图中全部结点，并且有尽可能少的边。一棵生成树的代价是树中各条边上的代价之和。一个网络的各生成树中，具有最小代价的生成树称为该网络的最小代价生成树（minimum-cost spanning tree）。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入结点个数n和边的个数m，以下m行输入各边的两个结点u、v及该边上的代价。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>如果有生成树，则输出最小生成树的代价；如果没有生成树，则输出”no spanning tree”。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>6 10<br>1 2 10<br>1 4 30<br>1 5 45<br>2 3 50<br>2 5 40<br>2 6 25<br>3 5 35<br>3 6 15<br>4 6 20<br>5 6 55</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>105</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> INFTY 32768</span><span class="token keyword">struct</span> ENode <span class="token punctuation">{</span>    <span class="token keyword">int</span> adjVex<span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    ENode <span class="token operator">*</span>nextArc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">IsConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span><span class="token punctuation">;</span>            ENode <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>adjVex <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>nextArc<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">protected</span><span class="token operator">:</span>    ENode <span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span> vSize<span class="token punctuation">,</span> eSize<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">DFS_Travel</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">*</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nearest<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>lowcost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Graph<span class="token operator">::</span><span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> vSize <span class="token operator">>></span> eSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    ENode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token keyword">new</span> ENode<span class="token operator">*</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>eSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token keyword">new</span> ENode<span class="token punctuation">;</span>        q <span class="token operator">=</span> <span class="token keyword">new</span> ENode<span class="token punctuation">;</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span>        u<span class="token operator">--</span><span class="token punctuation">;</span> v<span class="token operator">--</span><span class="token punctuation">;</span>        p<span class="token operator">-</span><span class="token operator">></span>adjVex <span class="token operator">=</span> u<span class="token punctuation">;</span>        q<span class="token operator">-</span><span class="token operator">></span>adjVex <span class="token operator">=</span> v<span class="token punctuation">;</span>        p<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">=</span> q<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">=</span> w<span class="token punctuation">;</span>        p<span class="token operator">-</span><span class="token operator">></span>nextArc <span class="token operator">=</span> a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>        q<span class="token operator">-</span><span class="token operator">></span>nextArc <span class="token operator">=</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Graph<span class="token operator">::</span><span class="token function">IsConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token operator">*</span>visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">DFS_Travel</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no spanning tree"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Graph<span class="token operator">::</span><span class="token function">DFS_Travel</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">*</span>visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ENode <span class="token operator">*</span>w<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> w<span class="token punctuation">;</span> w<span class="token operator">=</span>w<span class="token operator">-</span><span class="token operator">></span>nextArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token operator">=</span>w<span class="token operator">-</span><span class="token operator">></span>adjVex<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token function">DFS_Travel</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Graph<span class="token operator">::</span><span class="token function">Prim</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>nearest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>lowcost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Prim</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> nearest<span class="token punctuation">,</span> lowcost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cost<span class="token operator">+</span><span class="token operator">=</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> cost<span class="token punctuation">;</span>    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nearest<span class="token punctuation">;</span>    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> lowcost<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Graph<span class="token operator">::</span><span class="token function">Prim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nearest<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>lowcost<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token operator">*</span>mark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span> <span class="token punctuation">[</span>vSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    ENode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> k<span class="token operator">></span>vSize<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nearest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>INFTY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    nearest<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>    mark<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token punctuation">;</span> p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>nextArc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>adjVex<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>p<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">;</span>                nearest<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> min<span class="token operator">=</span>INFTY<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>vSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min<span class="token operator">=</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mark<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Graph g<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//g.test();</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">IsConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        g<span class="token punctuation">.</span><span class="token function">Prim</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1459 带时限的作业排序问题</title>
      <link href="/2017/05/18/ahnu-oj1459/"/>
      <content type="html"><![CDATA[<p>带时限的作业排序问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:729 Accepted:309</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>设有一个单机系统、无其它资源限制且每个作业运行相等时间，不妨假定每个作业运行1个单位时间。现有n个作业，每个作业都有一个截止期限di&gt;0，di为整数。如果作业能够在截止期限之内完成，可获得pi&gt;0的收益。问题要求得到一种作业调度方案，该方案给出作业的一个子集和该作业子集的一种排列，使得若按照这种排列次序调度作业运行，该子集中的每个作业都能如期完成，并且能够获得最大收益。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入n的值，以下n行输入作业号i，收益pi，截止期限di。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>n个作业的一个最优子集。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>4<br>1 100 2<br>2 10 1<br>3 15 2<br>4 27 1</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>1 4</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span>JOB<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Sort_by_p</span><span class="token punctuation">(</span>JOB <span class="token operator">*</span>job<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    JOB tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>job<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p <span class="token operator">&lt;</span> job<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmp<span class="token operator">=</span>job<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                job<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>job<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                job<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">JS</span><span class="token punctuation">(</span>JOB <span class="token operator">*</span>job<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> job<span class="token punctuation">[</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>no <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token operator">=</span>k<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">[</span>x<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token operator">></span>job<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">[</span>x<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token operator">></span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            r<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> job<span class="token punctuation">[</span>x<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token operator">&lt;=</span>job<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token operator">></span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>k<span class="token punctuation">;</span> i<span class="token operator">>=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            x<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> job<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>no <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    JOB <span class="token operator">*</span>job<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    job <span class="token operator">=</span> <span class="token keyword">new</span> JOB <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> job<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>no <span class="token operator">>></span> job<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p <span class="token operator">>></span> job<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Sort_by_p</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">JS</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1458 部分背包问题</title>
      <link href="/2017/05/18/ahnu-oj1458/"/>
      <content type="html"><![CDATA[<p>部分背包问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:839 Accepted:329</p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>已知一个载重为M的背包和n件物品，第i件物品的重量为 wi，如果将第i件物品全部装入背包，将有收益pi，这里，wi&gt;0，pi&gt;0。所谓背包问题是指求一种最佳装载方案，使得收益最大。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行物品个数n和背包载重M，以下n行输入物品编号i，物品收益pi，物品重量wi。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>x1,x2,…,xn，0&lt;=xi&lt;=1，每个xi是第i件物品装入背包中的部分（小数位保留二位）。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><p>3 20<br>1 25 18<br>2 24 15<br>3 15 10</p><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><p>0.00 1.00 0.50</p><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SumOfSub</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> k<span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0 "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>        <span class="token function">SumOfSub</span><span class="token punctuation">(</span>s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">-</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span>r<span class="token operator">-</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">>=</span>m <span class="token operator">&amp;&amp;</span> s<span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">SumOfSub</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">-</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SumOfSub</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        r<span class="token operator">+</span><span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">>=</span>m <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>        <span class="token function">SumOfSub</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> M<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> M<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token operator">=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                t<span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">SumOfSub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">,</span> M<span class="token punctuation">,</span> w<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no solution!"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SoftEther VPN 服务搭建（Linux 版）</title>
      <link href="/2017/05/14/setup-softether-vpn-server-on-linux-vps/"/>
      <content type="html"><![CDATA[<h2 id="工具材料"><a href="#工具材料" class="headerlink" title="工具材料"></a>工具材料</h2><ul><li>VPS / 云服务器（本文以 <code>Ubuntu Server 14.04.1 LTS 64bit</code> 系统为例）</li><li>SoftEther VPN Server（<a href="http://www.softether-download.com/cn.aspx" target="_blank" rel="noopener">官方下载</a>（被墙））</li><li>SoftEther VPN Client（<a href="http://www.softether-download.com/cn.aspx" target="_blank" rel="noopener">官方下载</a>（被墙）<a href="https://pan.baidu.com/s/1mhY6NkG" target="_blank" rel="noopener">网盘下载</a>）</li><li>putty（<a href="http://www.putty.org/" target="_blank" rel="noopener">下载地址</a>）</li></ul><h2 id="安装-SoftEther-VPN-Server"><a href="#安装-SoftEther-VPN-Server" class="headerlink" title="安装 SoftEther VPN Server"></a>安装 SoftEther VPN Server</h2><p>1.登录到 VPS</p><p>Linux / OS X 下直接在 <code>terminal</code> 中登录：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> username@vps_ip</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4368698-65a8971f26d71ab5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>Windows 下使用 <code>putty</code> 登录</p><p>2.更新一下 <code>apt-get</code> 源并安装gcc等工具</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</code></pre><p>3.下载 <code>SoftEther VPN Server</code> （也可以使用 <code>scp</code> 从本地上传到云服务器）</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 32bit 执行这个</span><span class="token function">wget</span> http://opxbtqu6c.bkt.clouddn.com/SoftEther-VPN/softether-vpnserver-v4.20-9608-rtm-2016.04.17-linux-x64-64bit.tar.gz<span class="token comment" spellcheck="true"># 64bit 执行这个</span><span class="token function">wget</span> http://opxbtqu6c.bkt.clouddn.com/SoftEther-VPN/softether-vpnserver-v4.20-9608-rtm-2016.04.17-linux-x64-64bit.tar.gz</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4368698-9a4ee5c7234a21ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.使用 <code>tar</code> 解压，会产生一个 <code>vpnserver</code> 文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> xvf softether-vpnserver-v4.20-9608-rtm-2016.04.17-linux-x64-64bit.tar.gz</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4368698-568de4bad530e2a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.进入 <code>vpnserver</code> 文件夹，然后安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> vpnserver<span class="token function">make</span></code></pre><p>连续输3次1同意许可协议<br><img src="http://upload-images.jianshu.io/upload_images/4368698-e9602a8974b7691f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4368698-5e3cebbfa949a5cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="配置-SoftEther-VPN-Server"><a href="#配置-SoftEther-VPN-Server" class="headerlink" title="配置 SoftEther VPN Server"></a>配置 SoftEther VPN Server</h2><p>1.开启 <code>vpn</code> 服务</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> /home/ubuntu/vpnserver/vpnserver start</code></pre><p>2.执行以下命令，然后依次输入1、回车、回车</p><pre class=" language-bash"><code class="language-bash">/home/ubuntu/vpnserver/vpncmd</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4368698-97b006b192194254.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4368698-a4130440cda70a40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.输入以下命令设置管理密码，之后按 <code>Ctrl+C</code> 退出 vpncmd</p><pre><code>ServerPasswordSet</code></pre><p>4.将 <code>vpnserver</code> 加入开机启动项（可选）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/rc.local</code></pre><p>按 <code>i</code> 键，将 <code>/home/ubuntu/vpnserver/vpnserver start</code> 写入文件，按下 <code>ESC</code> ，输入 <code>:wq</code> 退出</p><h2 id="管理-SoftEther-VPN-Server"><a href="#管理-SoftEther-VPN-Server" class="headerlink" title="管理 SoftEther VPN Server"></a>管理 SoftEther VPN Server</h2><p>SoftEther 提供了 <code>图形界面</code> 的 <code>vpn server</code> 管理工具，目前有 <code>Windows</code> 版和 <code>OS X</code> 版（推荐 win 版，支持中文）</p><p>1.打开 VPN Server Manager ，添加新设置</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-f49bf1352f334d3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt=""></p><p>填入server端的 <code>ip</code> 和 <code>端口</code> 以及 <code>管理员</code> 的 <code>密码</code></p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-de74be5b6b6b8c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>2.连接server端</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-4dd18fe21c8d191a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt=""></p><p>勾选远程访问</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-c0446980957046a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>默认 VPN</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-0012b56d655b0df3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-d25b5b955befc212.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>如果需要开启其他平台的设备连接 VPN ，则勾选并设置秘钥</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-fb01b749218ac0d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>禁用 VPN Azure</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-3001db760593919f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-328d0f8bcc393bc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>创建用户，填入用户名、密码，验证类型选密码验证</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-e01480e134e56167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><h2 id="连接-SoftEther-VPN-Server"><a href="#连接-SoftEther-VPN-Server" class="headerlink" title="连接 SoftEther VPN Server"></a>连接 SoftEther VPN Server</h2><p>SoftEther 也提供了 <code>图形界面</code> 的 <code>SoftEther VPN Client</code></p><p>1.安装 <code>SoftEther VPN Client</code> ，然后打开</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-3e9fcf6fcde3a065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>2.添加新的连接</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-020e09218b76b19a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>使用默认的 <code>VPN</code> 作为适配器名</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-57917ea02d75b49b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-e14faab13ca513d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>3.再次点击添加新的连接</p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-020e09218b76b19a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>填入server端的 <code>ip</code> 和 <code>端口</code> 以及server端添加的 <code>用户</code>的 <code>用户名</code> 和 <code>密码</code></p><p><img src="http://upload-images.jianshu.io/upload_images/4368698-46e42a2abb1fa370.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>4.回到主界面连接即可</p>]]></content>
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> SoftEther </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单个循环实现冒泡排序</title>
      <link href="/2017/05/07/bubble-sort-one-loop/"/>
      <content type="html"><![CDATA[<ul><li>普通的冒泡排序</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>使用一层循环实现的冒泡排序</li></ul><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 用宏实现变量交换</span><span class="token macro property">#<span class="token directive keyword">define</span> Swap(a,b,c) ((c)=(a),(a)=(b),(b)=(c))</span><span class="token comment" spellcheck="true">// 第一种</span><span class="token keyword">void</span> <span class="token function">BubbleSortOneLoop</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//i还是控制最外层</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>l <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span>n <span class="token operator">-</span> i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//只不过在特殊点的时候改变l和i</span>        <span class="token punctuation">{</span>            l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第二种</span><span class="token keyword">void</span> <span class="token function">BubbleSortOneLoop</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//大次数为n*n-1，%n实现下标循环</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>l<span class="token operator">%</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> l<span class="token operator">%</span>n<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//直接判断</span>        <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>l<span class="token operator">%</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        l<span class="token operator">++</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>冒泡法时间复杂度为 <code>O(n^2)</code> ，这个是改不了的，不可能因为用一个循环实现，就变成了 <code>O(n)</code>。所以，并没有什么卵用，只是一种写代码的方式而已。。。</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端面试题：从 url 到页面展现，这中间发生了什么？</title>
      <link href="/2017/05/07/interview-url-to-page-what-happened/"/>
      <content type="html"><![CDATA[<blockquote><p>我们平常在地址栏里输入一些网址时，页面很快就会出现，但在这之中到底发生了什么事情呢？</p></blockquote><h1 id="大概是这样的流程："><a href="#大概是这样的流程：" class="headerlink" title="大概是这样的流程："></a>大概是这样的流程：</h1><ul><li>在浏览器的地址栏中敲入了url</li><li>DNS 解析</li><li>服务器处理请求</li><li>浏览器处理</li><li>绘制网页</li></ul><h2 id="一、在浏览器的地址栏中敲入了url"><a href="#一、在浏览器的地址栏中敲入了url" class="headerlink" title="一、在浏览器的地址栏中敲入了url"></a>一、在浏览器的地址栏中敲入了url</h2><h3 id="url是什么"><a href="#url是什么" class="headerlink" title="url是什么"></a>url是什么</h3><p>URL（Uniform Resource Locator），统一资源定位符，用于定位互联网上的资源，实际上就是网站网址。url的格式一般为：</p><p>协议类型://&lt;主机名&gt;:&lt;端口&gt;/&lt;路径&gt;/文件名<br>其中协议类型可以是http（超文本传输协议）、https、ftp（文件传输协议）、telnet（远程登录协议）、file等等。而http是最常见的网络传输协议，https则是进行加密的网络传输。</p><p>例如，网址 <code>http://rocj.site/2017/post</code> ，其中，“http”表示与web服务器通讯采用 <code>http协议</code> ，web服务器域名为rocj.site，2017/post表示所访问的文件存在于web服务器上的路径。</p><p>url格式中主机名冒号后面的数字是端口编号，因为一台计算机常常会同时作为Web，FTP等服务器，端口编号用来告诉web服务器所在的主机要将请求交给哪个服务。默认情况下http服务的端口为80，不需要在url中输入，如果web服务器采用的不是这一个默认端口，就需要写明服务所用的端口。常见的协议默认端口如下：</p><table><thead><tr><th style="text-align:center">协议类型</th><th style="text-align:center">默认端口</th></tr></thead><tbody><tr><td style="text-align:center">http</td><td style="text-align:center">80</td></tr><tr><td style="text-align:center">ftp</td><td style="text-align:center">21</td></tr><tr><td style="text-align:center">https</td><td style="text-align:center">443</td></tr><tr><td style="text-align:center">telnet</td><td style="text-align:center">23</td></tr></tbody></table><h3 id="IP是什么"><a href="#IP是什么" class="headerlink" title="IP是什么"></a>IP是什么</h3><p>IP是因特网中的每台连接到网络的计算机为实现相互通信而遵循的规则协议。每个处于互联网中的设备都有IP 地址，形如 192.168.0.1，而127.0.0.1代表本机的 IP。IP又分为局域网IP和公网IP。而局域网 IP 和公网 IP 是有差别的。每个网站就是靠IP来定位的。</p><p>为了便于记忆或辨识，人们使用域名来登录网站，每个域名背后有对应的IP地址。</p><p>比如对于 <code>http://www.jianshu.com</code> 的URL，浏览器实际上不知道 <code>www.jianshu.com</code> 到底是什么东西，需要查找 <code>www.jianshu.com</code> 网站所在服务器的IP地址，才能找到目标，这就是下文要说的域名解析。</p><h2 id="二、DNS-解析"><a href="#二、DNS-解析" class="headerlink" title="二、DNS 解析"></a>二、DNS 解析</h2><p>当用户在浏览器中输入url后</p><h3 id="查找浏览器缓存"><a href="#查找浏览器缓存" class="headerlink" title="查找浏览器缓存"></a>查找浏览器缓存</h3><p>浏览器会检查缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就将结束。Chrome浏览器看本身的DNS缓存时间比较方便，在地址栏输入 <code>chrome://net-internals/#dns</code> ，就可以看到了<br><img src="http://upload-images.jianshu.io/upload_images/5308475-1edd5a71a8c33fd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="查找操作系统缓存"><a href="#查找操作系统缓存" class="headerlink" title="查找操作系统缓存"></a>查找操作系统缓存</h3><p>如果用户的浏览器缓存中没有，浏览器会从hosts文件查找是否有存储DNS信息，查找是否有目标域名和对应的IP地址</p><h3 id="查找路由器缓存"><a href="#查找路由器缓存" class="headerlink" title="查找路由器缓存"></a>查找路由器缓存</h3><p>如果系统缓存中也找不到，那么查询请求就会发向路由器，路由器一般会有自己的DNS缓存。</p><h3 id="查找-ISP-DNS-缓存"><a href="#查找-ISP-DNS-缓存" class="headerlink" title="查找 ISP DNS 缓存"></a>查找 ISP DNS 缓存</h3><p>如果路由器缓存中也找不到，那么就查询 ISP DNS 缓存服务器了。<br>我们都知道在我们的网络配置中都会有”DNS服务器地址”这一项，操作系统会把这个域名发送给这里设置的DNS，比如 <code>114.114.114.114</code> ,也就是本地区的域名服务器，通常是提供给你接入互联网的应用提供商。而 <code>114.114.114.114</code> 是国内移动、电信和联通通用的DNS。</p><h3 id="递归查找"><a href="#递归查找" class="headerlink" title="递归查找"></a>递归查找</h3><p>如果前面都找不到DNS缓存的话，会有以下几个步骤：</p><ul><li>本地 DNS服务器将该请求转发到互联网上的根域（根域没有名字，在DNS系统中就用一个空字符串来表示。例如 <code>www.baidu.com</code> .现在的DNS系统都不会要求域名以.来结束，即 <code>www.baidu.com</code> 就可以解析了，但是现在很多DNS解析服务商还是会要求在填写DNS记录的时候以.来结尾域名。）</li><li>根域将所要查询域名中的顶级域（比如要查询 <code>www.baidu,com</code> ，该域名的顶级域就是 <code>com</code> ）的服务器IP地址返回到本地DNS。</li><li>本地DNS根据返回的IP地址，再向顶级域（就是com域）发送请求， com域服务器再将域名中的二级域（即 <code>www.baidu.com</code> 中的 <code>baidu.com</code> ）的IP地址返回给本地DNS。</li><li>本地DNS再向二级域发送请求进行查询。</li><li>之后不断重复这样的过程，直到本地DNS服务器得到最终的查询结果，并返回到主机。这时候主机才能通过域名访问该网站。</li></ul><p>下图能很好的说明这个递归查找:<br><img src="http://upload-images.jianshu.io/upload_images/5308475-cf58e66c93c1f2ec.gif?imageMogr2/auto-orient/strip" alt=""></p><p>当查找到对应的IP地址之后，通过IP地址查找到对应的服务器，浏览器将用户发起的http请求发送给服务器。例如：<code>GET http://www.baidu.com/ HTTP/1.1</code></p><h2 id="三、服务器处理请求"><a href="#三、服务器处理请求" class="headerlink" title="三、服务器处理请求"></a>三、服务器处理请求</h2><p>每台服务器上都会安装处理请求的应用——<code>Web server</code>。常见的web server产品有<code>apache</code>、<code>nginx</code>、<code>IIS</code>、<code>Lighttpd</code>等。</p><p>当web server接收到一个HTTP请求(request)，会返回一个HTTP响应(response)，例如送回一个HTML页面。对于不同用户发送的请求，会结合配置文件，把不同请求委托给服务器上处理对应请求的程序进行处理（例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术等）。</p><p>无论它们(脚本)的目的如何，这些服务器端(server-side)的程序通常产生一个HTML的响应(response)来让浏览器可以浏览。</p><p>那么如何处理请求？实际上就是后台处理的工作。后台开发现在有很多框架，但大部分都还是按照<a href="https://zh.wikipedia.org/wiki/MVC" target="_blank" rel="noopener">MVC设计模式</a>进行搭建的。</p><p>处理的过程如下图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-d45e8967170041f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>MVC的处理过程是这样的：对于每一个用户输入的请求，首先被控制器接收，控制器决定用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器确定用哪个视图模型，用相应的视图格式化模型返回html字符串给浏览器，并通过显示页面呈现给用户。</p><h2 id="四、浏览器处理"><a href="#四、浏览器处理" class="headerlink" title="四、浏览器处理"></a>四、浏览器处理</h2><p>接下来就是浏览器进行处理， 通过后台处理返回的HTML字符串被浏览器接受后被一句句读取解析，html页面经历加载、解析、渲染。</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>浏览器对一个html页面的加载顺序是从上而下的。如果加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树，也就是DOM树。如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-3817847173a249ef.gif?imageMogr2/auto-orient/strip" alt=""></p><p>css解析是指将css文件解析为样式表对象。如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-810853491150d1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>js解析是文件在加载的同时也进行解析<br>如果想深入如何解析的话可以看浏览器的工作原理：新式网络浏览器幕后揭秘这篇文章</p><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>即为构建渲染树的过程，就是将DOM树进行可视化表示。构建这棵树是为了以正确的顺序绘制文档内容。</p><h2 id="五、绘制网页"><a href="#五、绘制网页" class="headerlink" title="五、绘制网页"></a>五、绘制网页</h2><p>浏览器根据 HTML 和 CSS 计算得到渲染树，最终绘制到屏幕上</p><p><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">出处</a></p>]]></content>
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> http </tag>
            
            <tag> 域名 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>克隆 Github 项目的非 master 分支</title>
      <link href="/2017/05/01/clone-non-master-branch-on-github/"/>
      <content type="html"><![CDATA[<h3 id="Step-1-Clone-Repo"><a href="#Step-1-Clone-Repo" class="headerlink" title="Step.1 Clone Repo"></a>Step.1 Clone Repo</h3><p>切换路径</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> path</code></pre><p>克隆仓库</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone git@github.com:username/Repo.git</code></pre><h3 id="Step-2-Checkout-Branch"><a href="#Step-2-Checkout-Branch" class="headerlink" title="Step.2 Checkout Branch"></a>Step.2 Checkout Branch</h3><p>进入目录</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> RepoPath</code></pre><p>创建并跟踪分支</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> checkout -b branchName origin/branchName</code></pre>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clone </tag>
            
            <tag> branch </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1457 第K小元素问题</title>
      <link href="/2017/03/21/ahnu-oj1457/"/>
      <content type="html"><![CDATA[<p>第K小元素问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:664 Accepted:293 </p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>用分治法编程解决在n个数当中找第K小元素问题（注意：不能用排序）。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入n的值，第二行输入n个数，第三行输入K的值。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>n个数中的第K小元素。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><pre><code>58 1 3 6 93</code></pre><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><pre><code>6</code></pre><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SortableList</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> l<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> SortableList<span class="token operator">::</span><span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    cin <span class="token operator">>></span> length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin <span class="token operator">>></span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> SortableList<span class="token operator">::</span><span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span>l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>p<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            tmp<span class="token operator">=</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    tmp<span class="token operator">=</span>l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> SortableList<span class="token operator">::</span><span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>        <span class="token keyword">return</span> l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">Partition</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            q<span class="token operator">=</span>j<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            p<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        j<span class="token operator">=</span><span class="token function">Partition</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> SortableList<span class="token operator">::</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SortableList list<span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1456 最大最小元问题</title>
      <link href="/2017/03/21/ahnu-oj1456/"/>
      <content type="html"><![CDATA[<p>最大最小元问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:798 Accepted:296 </p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>请改写教材中的分治算法MaxMin，使其可以输出n个数中的最大值和次最大值以及最小值和次最小值（注意：不能用排序）。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入数的个数n，第二行输入n个数。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>第一行输出最大值和次最大值，第二行输出最小值和次最小值。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><pre><code>32 1 3</code></pre><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><pre><code>3 21 2</code></pre><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SortableList</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> l<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> SortableList<span class="token operator">::</span><span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    cin <span class="token operator">>></span> length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> SortableList<span class="token operator">::</span><span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span>l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>p<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            tmp<span class="token operator">=</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    tmp<span class="token operator">=</span>l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> SortableList<span class="token operator">::</span><span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>        <span class="token keyword">return</span> l<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">Partition</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            q<span class="token operator">=</span>j<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            p<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        j<span class="token operator">=</span><span class="token function">Partition</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> SortableList<span class="token operator">::</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token number">-1</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token number">-1</span><span class="token punctuation">,</span> length<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token function">K_Min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SortableList list<span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1455 关节点问题</title>
      <link href="/2017/03/21/ahnu-oj1455/"/>
      <content type="html"><![CDATA[<p>关节点问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:692 Accepted:259 </p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>对于一个给定的连通图G，采用深度优先搜索的方法，识别出G的所有关节点。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>第一行输入结点个数n和边的个数m，下面m行输入各边。</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>关节点个数</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><pre><code>8 100 30 22 31 22 41 41 65 65 76 7</code></pre><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><pre><code>3</code></pre><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;malloc.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAX 50</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> Low<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> Anode<span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Anode <span class="token operator">*</span>nextarc<span class="token punctuation">;</span><span class="token punctuation">}</span>ArcNode<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ArcNode vertices<span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span> <span class="token punctuation">}</span>ALGraph<span class="token punctuation">;</span>ALGraph G<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ALGraph <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ALGraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    Low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>time<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Anode <span class="token operator">*</span>w<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">;</span>w<span class="token operator">=</span>w<span class="token operator">-</span><span class="token operator">></span>nextarc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v<span class="token operator">=</span>w<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> Low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">></span>Low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>   Low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>Low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>p<span class="token operator">&amp;&amp;</span>Low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">></span>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>  Low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    Anode <span class="token operator">*</span>N<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>u<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>adjvex<span class="token operator">=</span>u<span class="token punctuation">;</span>        G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>nextarc<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">>></span>i<span class="token operator">>></span>j<span class="token punctuation">;</span>            N<span class="token operator">=</span><span class="token punctuation">(</span>Anode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Anode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            N<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token operator">=</span>j<span class="token punctuation">;</span>            N<span class="token operator">-</span><span class="token operator">></span>nextarc<span class="token operator">=</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nextarc<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nextarc<span class="token operator">=</span>N<span class="token punctuation">;</span>            N<span class="token operator">=</span><span class="token punctuation">(</span>Anode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Anode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            N<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token operator">=</span>i<span class="token punctuation">;</span>            N<span class="token operator">-</span><span class="token operator">></span>nextarc<span class="token operator">=</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>nextarc<span class="token punctuation">;</span>            G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>nextarc<span class="token operator">=</span>N<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Anode <span class="token operator">*</span>w<span class="token operator">=</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nextarc<span class="token punctuation">;</span>w<span class="token punctuation">;</span>w<span class="token operator">=</span>w<span class="token operator">-</span><span class="token operator">></span>nextarc<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>Low<span class="token punctuation">[</span>w<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span><span class="token operator">>=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>count<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1454 栈的问题</title>
      <link href="/2017/03/21/ahnu-oj1454/"/>
      <content type="html"><![CDATA[<p>栈的问题</p><p>Time Limit:2000MS  Memory Limit:65536K<br>Total Submit:500 Accepted:218 </p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>栈是一种重要的数据结构，其主要的操作包括入栈和出栈。请编写程序，对任意给定的n，输出1，2，…，n的所有出栈顺序。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>正整数n（1≤n≤15）</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>输出1，2，…，n的所有出栈顺序</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><pre><code>3</code></pre><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><pre><code>3 2 12 3 12 1 31 3 21 2 3</code></pre><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>stk<span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span> stack<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initstack</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token operator">-</span><span class="token operator">></span>stk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token operator">-</span><span class="token operator">></span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">outputstack</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token operator">-</span><span class="token operator">></span>top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">-</span><span class="token operator">></span>stk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">stackempty</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span>s<span class="token operator">-</span><span class="token operator">></span>top<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token operator">-</span><span class="token operator">></span>stk<span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token operator">></span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token operator">-</span><span class="token operator">></span>stk<span class="token punctuation">[</span><span class="token operator">--</span>s<span class="token operator">-</span><span class="token operator">></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">stackseq</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>input<span class="token punctuation">,</span> stack <span class="token operator">*</span>s<span class="token punctuation">,</span> stack <span class="token operator">*</span>output<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stackempty</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stackempty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">outputstack</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">stackempty</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">stackseq</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> s<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">stackempty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">push</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">stackseq</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> s<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    stack input<span class="token punctuation">,</span> s<span class="token punctuation">,</span> output<span class="token punctuation">;</span>    <span class="token function">initstack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initstack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initstack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>output<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">stackseq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1453 数的因子之和的问题</title>
      <link href="/2017/03/21/ahnu-oj1453/"/>
      <content type="html"><![CDATA[<p>数的因子之和的问题</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:1333 Accepted:446 </p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>编写一个C++递归程序求解下列问题：给定正整数n，确定n是否是它所有因子（不包括n）之和。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>正整数n</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>若n是它所有因子之和，输出Yes，否则输出No</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><pre><code>6</code></pre><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><pre><code>Yes</code></pre><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">Factor_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token function">Factor_sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Factor_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n<span class="token operator">%</span>m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> m<span class="token operator">+</span><span class="token function">Factor_sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Factor_sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OJ1452 集合的幂集</title>
      <link href="/2017/03/21/ahnu-oj1452/"/>
      <content type="html"><![CDATA[<p>集合的幂集</p><p>Time Limit:1000MS  Memory Limit:65536K<br>Total Submit:576 Accepted:289 </p><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>设S是有n（n≤20）个元素的集合，S的幂集是S所有可能的子集组成的集合。例如，S={a,b,c},则S的幂集={()(c)(b)(bc)(a)(ac)(ab)(abc)}。写一个C++递归程序，以S为输入，输出S的幂集。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><p>n（n≤20）的值以及S的n个元素</p><h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>S的幂集</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><pre><code>3abc</code></pre><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><pre><code>()(c)(b)(bc)(a)(ac)(ab)(abc)</code></pre><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"iostream"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Print_subset</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print_subset</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">'('</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cur<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">')'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    a<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">Print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">Print_subset</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> AHNU OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHNU OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>#ifndef 防止头文件被多次编译</title>
      <link href="/2017/01/18/prevent-headerfile-to-be-compiled-twice/"/>
      <content type="html"><![CDATA[<p>在 C/C++ 工程中，某个头文件可能会被多个文件包含，编译时就会报错，要想这个头文件在编译时只被包含一次，有如下办法：</p><ul><li>在 .h 头部加上</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span></code></pre><p>从<code>Visual Studio 2003</code>开始就支持这个 directive，如果是 Visual Studio 6.0 就不支持了</p><ul><li>条件编译</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _HEADFILE_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _HEADFILE_H_</span><span class="token comment" spellcheck="true">//在这里写你的头文件内容</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p><code>_HEADFILE_H_</code> 为宏名，用以区分不同的条件编译程序段</p>]]></content>
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 Coding Pages 搭建的优质博客</title>
      <link href="/2017/01/17/awesome-blogs-via-coding-pages/"/>
      <content type="html"><![CDATA[<p>利用 <code>Coding-pages</code>, <code>Github-pages</code> 等服务可以很轻松的将静态网站部署到 <code>Coding</code> 和 <code>Github</code> 上面并实现自定义域名访问，下面就是一些大神部署的个人博客：</p><table><thead><tr><th>博客名称</th><th>介绍</th><th>域名</th><th>Coding Pages</th></tr></thead><tbody><tr><td>TBOOX</td><td>the TBOOX Open Source Project</td><td><a href="http://tboox.org" target="_blank" rel="noopener">http://tboox.org</a></td><td><a href="https://coding.net/u/waruqi/p/tboox/git/pages" target="_blank" rel="noopener">https://coding.net/u/waruqi/p/tboox/git/pages</a></td></tr><tr><td>EyreFree</td><td>iOS 开发相关</td><td><a href="https://www.eyrefree.org" target="_blank" rel="noopener">https://www.eyrefree.org</a></td><td><a href="https://coding.net/u/eyrefree/p/eyrefree.org/git/pages" target="_blank" rel="noopener">https://coding.net/u/eyrefree/p/eyrefree.org/git/pages</a></td></tr><tr><td>小胡子哥的个人网站</td><td>JavaScript、前端相关</td><td><a href="https://barretlee.com" target="_blank" rel="noopener">https://barretlee.com</a></td><td><a href="https://coding.net/u/barretlee/p/blog/git/pages" target="_blank" rel="noopener">https://coding.net/u/barretlee/p/blog/git/pages</a></td></tr><tr><td>IPRO</td><td>养草程序员的博客</td><td><a href="https://ipro.xin" target="_blank" rel="noopener">https://ipro.xin</a></td><td><a href="https://coding.net/u/tan/p/tan/git/pages" target="_blank" rel="noopener">https://coding.net/u/tan/p/tan/git/pages</a></td></tr><tr><td>邵辉CRR</td><td>Android 开发相关</td><td><a href="http://shaohui.me" target="_blank" rel="noopener">http://shaohui.me</a></td><td><a href="https://coding.net/u/shaohui10086/p/shaohui10086/git/pages" target="_blank" rel="noopener">https://coding.net/u/shaohui10086/p/shaohui10086/git/pages</a></td></tr><tr><td>N神的研究所</td><td>前端、游戏、Flash 等</td><td><a href="http://nshen.net" target="_blank" rel="noopener">http://nshen.net</a></td><td><a href="https://coding.net/u/nshen/p/nshen121/git/pages" target="_blank" rel="noopener">https://coding.net/u/nshen/p/nshen121/git/pages</a></td></tr><tr><td>xiaofeig</td><td>JavaWeb后台开发</td><td><a href="http://coding.xiaofeig.cn" target="_blank" rel="noopener">http://coding.xiaofeig.cn</a></td><td><a href="https://coding.net/u/xiaofeig/p/xiaofeig/git/pages" target="_blank" rel="noopener">https://coding.net/u/xiaofeig/p/xiaofeig/git/pages</a></td></tr><tr><td>CZP’S BLOG</td><td>技术、读书、随笔等</td><td><a href="http://blog.luckypeng.com" target="_blank" rel="noopener">http://blog.luckypeng.com</a></td><td><a href="https://coding.net/u/czphappy/p/blog/git/pages" target="_blank" rel="noopener">https://coding.net/u/czphappy/p/blog/git/pages</a></td></tr><tr><td>高明飞的博客</td><td>嵌入式系统开发等各种技术</td><td><a href="http://gaomf.cn" target="_blank" rel="noopener">http://gaomf.cn</a></td><td><a href="https://coding.net/u/g199209/p/g199209/git/pages" target="_blank" rel="noopener">https://coding.net/u/g199209/p/g199209/git/pages</a></td></tr><tr><td>代码小屋</td><td>优质技术资源共享、全栈开发</td><td><a href="http://yodes.cn" target="_blank" rel="noopener">http://yodes.cn</a></td><td><a href="https://coding.net/u/Yodeser/p/Yodeser/git/pages" target="_blank" rel="noopener">https://coding.net/u/Yodeser/p/Yodeser/git/pages</a></td></tr><tr><td>yoqu的小博客</td><td>Java 开发相关，系统使用分享</td><td><a href="http://www.yoqu.org" target="_blank" rel="noopener">http://www.yoqu.org</a></td><td><a href="https://coding.net/u/yoqu/p/blog/git/pages" target="_blank" rel="noopener">https://coding.net/u/yoqu/p/blog/git/pages</a></td></tr><tr><td>不可能不确定</td><td>Node.js、JavaScript 开发</td><td><a href="http://chensd.com" target="_blank" rel="noopener">http://chensd.com</a></td><td><a href="https://coding.net/u/Stiekel/p/blog/git/pages" target="_blank" rel="noopener">https://coding.net/u/Stiekel/p/blog/git/pages</a></td></tr><tr><td>JXue博客</td><td>全栈开发</td><td><a href="http://jxue.coding.me" target="_blank" rel="noopener">http://jxue.coding.me</a></td><td><a href="https://coding.net/u/JXue/p/JXue/git/pages" target="_blank" rel="noopener">https://coding.net/u/JXue/p/JXue/git/pages</a></td></tr><tr><td>胡阳广的博客</td><td>技术，工作，生活，杂谈</td><td><a href="https://uxwind.me" target="_blank" rel="noopener">https://uxwind.me</a></td><td><a href="https://coding.net/u/chnhyg/p/chnhyg/git/pages" target="_blank" rel="noopener">https://coding.net/u/chnhyg/p/chnhyg/git/pages</a></td></tr><tr><td>crossoverJie的独立博客</td><td>JavaWeb、Android 等互联网技术</td><td><a href="http://crossoverjie.top" target="_blank" rel="noopener">http://crossoverjie.top</a></td><td><a href="https://coding.net/u/crossoverJie/p/crossoverJie/git/pages" target="_blank" rel="noopener">https://coding.net/u/crossoverJie/p/crossoverJie/git/pages</a></td></tr><tr><td>saymagic的博客</td><td>Android 开发相关</td><td><a href="http://blog.saymagic.cn" target="_blank" rel="noopener">http://blog.saymagic.cn</a></td><td><a href="https://coding.net/u/saymagic/p/blog/git/pages" target="_blank" rel="noopener">https://coding.net/u/saymagic/p/blog/git/pages</a></td></tr><tr><td>JXue博客</td><td>全栈开发</td><td><a href="http://jxue.coding.me" target="_blank" rel="noopener">http://jxue.coding.me</a></td><td><a href="https://coding.net/u/JXue/p/JXue/git/pages" target="_blank" rel="noopener">https://coding.net/u/JXue/p/JXue/git/pages</a></td></tr><tr><td>Half Lab</td><td>计算机图形&amp;创意编程</td><td><a href="https://www.halflab.me" target="_blank" rel="noopener">https://www.halflab.me</a></td><td><a href="https://coding.net/u/shawn0326/p/shawn0326/git/pages" target="_blank" rel="noopener">https://coding.net/u/shawn0326/p/shawn0326/git/pages</a></td></tr><tr><td>szhshp的第三边境研究所</td><td>前端，设计，游戏，生活</td><td><a href="http://szhshp.org" target="_blank" rel="noopener">http://szhshp.org</a></td><td><a href="https://coding.net/u/szhshp/p/stylish-portfolio-jekyll/git/pages" target="_blank" rel="noopener">https://coding.net/u/szhshp/p/stylish-portfolio-jekyll/git/pages</a></td></tr><tr><td>LP’s BLog</td><td>业余全栈开发，Node.js、Linux爱好者</td><td><a href="http://lupeng.me" target="_blank" rel="noopener">http://lupeng.me</a></td><td><a href="https://coding.net/u/pengloo53/p/pengloo53/git/pages" target="_blank" rel="noopener">https://coding.net/u/pengloo53/p/pengloo53/git/pages</a></td></tr><tr><td>爱红旗渠</td><td>技术博客 Android</td><td><a href="http://ihongqiqu.com" target="_blank" rel="noopener">http://ihongqiqu.com</a></td><td><a href="https://coding.net/u/keeeweee/p/keeeweee/git/pages" target="_blank" rel="noopener">https://coding.net/u/keeeweee/p/keeeweee/git/pages</a></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Default </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding-pages </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分享雷军22年前编写的代码</title>
      <link href="/2017/01/17/code-of-leijun/"/>
      <content type="html"><![CDATA[<pre><code>;; RI.ASM Revision 2.12 [ July 12, 1994 ]Revision equ &#39;V2.12 &#39;;; ;  ;  RAMinit Release 2.0 ;  Copyright (c) 1989-1994 by Yellow Rose Software Co. ;  Written by Mr. Leijun ;  ;  Function: ;  Press HotKey to remove all TSR program after this program ;  ; ; ..........................................................................; Removed Softwares by RI:; SPDOS v6.0F, WPS v3.0F; Game Busters III, IV; NETX ( Novell 3.11 ); PC-CACHE; Norton Cache; Microsoft SmartDrv; SideKick 1.56A; MOUSE Driver; Crazy (Monochrome simulate CGA program); RAMBIOS v2.0; 386MAX Version 6.01; ..........................................................................; No cancel softwares:; Windows 3.1 MSD;; No removed TSR softwares:; MS-DOS fastopen; Buffers, Files ... (QEMM 6.0); QCache (386MAX 6.01); ..........................................................................;COMMENT V2.04 Use mouse driver software reset function to initiation mouse2/17/1993 by Mr. Lei and Mr. FengV2.05 RI cannot work in Windows DOS prompt3/9/1993 by Mr. LeiV2.06 1. When XMS cannot allocate 1K memory, RI halts.2. RI repeat deallocates EMS memory.V2.07 HotKey Setup Error4/25/1993 by Mr. LeiV2.08 KB BufferV2.10 1. Release high memory blocks (EMM386 QEMM386 S-ICE 386MAX)2. RI copies flagV2.12 1. Exists a critical error in Init 8259 procedure2. Save [40:F0--FF] user data areadosseg.model tiny.codelocals @@org 100hStart: jmp Mainorg 103hTrue equ 1False equ 0MaxHandles equ 100hINT3 macroout 0ffh,alendm;; HotKey Status Test Var; --------------- ---------------;; 7 6 5 4 3 2 1 0 417 418 496; . . x . x . . . Left Alt is pressed 8 2; x . . . x . . . Right Alt is pressed 8 8; . . . x . x . . Left Ctrl is pressed 4 1; . x . . . x . . Right Ctrl is pressed 4 4; . . . . . . x . Left Shift is pressed 2; . . . . . . . x Right Shift is pressed 1;LeftAlt equ 00101000bRightAlt equ 10001000bLeftCtrl equ 00010100bRightCtrl equ 01000100bLeftShift equ 00000010bRightShift equ 00000001bHotKey db LeftCtrl or RightCtrlDataBegin dw 0NextDataSeg dw 0ffffholdInt2F_addr dw 0, 0XMS_control dw 0, 0Handle_begin dw 0cvtOfs dw 0 ; DOS 3.0 equ 0 and above DOS 4.0 is 1org 104hdb 0dhdb Revisiondb ??datedb 26org 114htsrLength dw 0MachineID db 0FCh ; IBM PC/ATAuxHotKey db 0 ; 2Dh ; &#39;X&#39; Scan CodeAuxHotKeyName db &#39;X$ &#39;Power db TrueFlag db &#39;!&#39;Kbd102 db 0NoFlag db 0StopFlag db 1DosEnv dw 0WorkSeg dw 0PrevDataSeg dw 0Copies db &#39;1&#39;old_8259 db 0 ; 21h portdb 0 ; a1h portStatus dw 0XMSbit equ 00000001bEMSbit equ 00000010bSKbit equ 10000000bGoINT1C: db 0eaholdInt1C_addr dw 0, 0newINT1C:test cs:Status, SKbitjnz GoINT1Ccmp cs:StopFlag, 0jz @@0;; Mr. Lei 2/8/1993; Problem: if WPS quit and reenter, old RI cann&#39;t control keyboard. ;push dspush axxor ax, axmov ds, axmov ax, ds:[94]cmp ax, offset NewInt9pop axpop dsjnz GoINT1Cmov cs:StopFlag, 0@@0: push axpush dspush esxor ax, axmov ds, axmov es, ds:[94+2]cmp word ptr es:[101h], &#39;IE&#39; ; &#39;LEI&#39;jz @@1climov cs:StopFlag, 1mov ax, ds:[94]mov cs:oldINT9_addr2, axmov ax, ds:[94+2]mov cs:oldINT9_addr2[2], axmov ds:[94], offset newINT9_2mov ds:[94+2], cssti@@1: pop espop dspop axjmp GoINT1C; ----------------------------------------------------------------------; INT2F Func;; AX = C0D7h Return RI segment in AX; AX = C0D8h Removes all TSR programs after RI; AX = C0D9h Removes all TSR programs include RI; AX = C0DAh Removes all RI copies; ----------------------------------------------------------------------newINT2F:cmp ax, 0c0d7h ; LEI Hanzi GB Codejnz @@1push cspop axiret@@1: cmp ax, 0c0d7h+1jnz @@2jmp KeepSelf@@2: cmp ax, 0c0d7h+2jnz @@3jmp NoKeepSelf@@3: cmp ax, 0c0d7h+3jnz @@9mov cs:NextDataSeg, -1mov cs:Copies, &#39;1&#39;jmp NoKeepSelf@@9: jmp dword ptr cs:oldInt2F_addrCallInt9:retnewINT9_2:mov cs:NoFlag, 1pushfdb 9ah ; call far ptr oldint9_addroldInt9_Addr2 dw 0, 0jmp newINT9_procnewINT9:pushfdb 9ah ; call far ptr oldint9_addroldInt9_Addr dw 0, 0 cmp cs:NoFlag, 0jz newINT9_procmov cs:NoFlag, 0iretnewINT9_proc:cmp cs:Flag, &#39;!&#39; ; busy ?jnz @@0iret@@0:mov cs:Flag, &#39;!&#39; ; set busy flagpush ax ; cmp hot keypush bxpush esmov ax,40hmov es,axcmp cs:AuxHotKey, 0jz @@_1mov bx, es:[1ah]cmp bx, es:[1ch]jz @@10push bxmov bl, es:[bx+1]cmp bl, cs:AuxHotKeypop bxjnz @@10@@_1:mov ah,es:[17h] ; test CTRL SHIFT ALTmov al,cs:HotKeypush axand ax,0f0fhcmp al,ahpop axjnz @@10 cmp cs:Kbd102, Truejnz @@1shr al, 1shr al, 1shr al, 1shr al, 1push axmov ah, es:[18h]and ax, 303hcmp al, ahpop axjnz @@10mov ah, es:[96h]shr ax, 1shr ax, 1and ax, 303hcmp al, ahjnz @@10 cmp cs:AuxHotKey, 0jz @@_3inc bxinc bxcmp bx, 3ehjb @@_2mov bx, 1eh@@_2:mov es:[1ah], bx@@_3:call IsWinDosor ax, axjz @@1call Beep@@10:stipop espop bxpop axmov cs:Flag, &#39; &#39; ; no busyiret@@1: ; OKpop espop bxpop axKeepSelf:call RemoveTSRpush esmov es,cs:WorkSegmov dx,es:tsrLengthmov di,dxmov al,0h ; Aug 24, 1993mov cx,100hrep stosbpop esint 27hNoKeepSelf:mov ax,0e07hint 10hmov cs:clsStr, 47h ; Color (White in Red)call RemoveTSRdec cs:Copiescall RestoreSelfIntVecpush escmp cs:PrevDataSeg, 0jz @@1mov es, cs:PrevDataSegmov es:NextDataSeg, -1@@1: pop esmov ax, 4c00hint 21h; ---------------------------------------------------------------------------IsWinDOS:mov ax, 1600hint 2fhcmp al, 01hjz @@9 cmp al, 0ffhjz @@9 ; Windows/386 Version 2.Xcmp al, 00hjz @@1 cmp al, 80hjnz @@9 ; Windows 3 in enhanced mode; Version number in AL/AH@@1:mov ax, 4680hint 2fhcmp al, 80hjnz @@9xor ax, axjmp @@10@@9: mov ax, 1@@10: ret; -----------------------------------------------------------------------RestoreSelfIntVec:cmp Copies, &#39;0&#39;jz @@0ret@@0:clipush cspop dsxor ax, axmov es, axmov si, offset oldInt9_Addrmov di, 94movswmovswmov si, offset oldInt2F_Addrmov di, 2Fh4movswmovswmov si, offset oldInt1C_Addrmov di, 1Ch4movswmovswstiret; ------------- KERNEL PROGRAM ----------------------------------------------RemoveTSR:pop axcli ; Set stackmov sp, csmov ss, spmov sp, 100hstipush axcmp cs:Power, Truejnz @@1call Init8259@@1:push cspop ds@@_0:mov ax,ds:NextDataSegcmp ax, -1jz @@_1mov cs:PrevDataSeg, dsmov ds, axjmp @@_0@@_1: mov si,ds:DataBeginmov cs:WorkSeg, dslodswcmp ax, &#39;XX&#39;jz @@_2call Beepret@@_2:call RestoreEnvStrcall RestoreMCB ; restore current mcbcall CloseFilescall RestorePortcall RestoreLEDscall RestoreVecList ; Restore vectors listcall RestoreFloppyParamcmp cs:Power, Truejnz @@2call RestoreCVTchain ; Restore cvt chaincall RestoreMemoryManager@@2:call RestoreBiosDatacall Enable8259mov ah, 1 int 16hcall RestoreClockSpeedcall CloseSpeakercall ResetDiskcall UpdateTimecall ClosePRNmov bx,cs:WorkSegmov ah,50hint 21h ; Set PSP segmentmov ax,3 int 10h ; Set display modecall InitPRNcall InitMousemov al, cs:Copiescmp al, &#39;1&#39;ja @@_sh1mov cs:ShowCopies, &#39;&#39;jmp @@_sh2@@_sh1: mov cs:ShowCopies, al@@_sh2:mov si, offset clsStrcall ColorPrintStrmov cs:Flag, &#39; &#39; ; no busycmp Copies, &#39;1&#39;jnz @@_endmov cs:StopFlag, 0@@_end:call ClearKB_bufferretBeep:mov ax,0e07hint 10hret; #########################################################################ClearKB_Buffer:push espush bxmov bx, 0040hmov es, bxclimov bx, es:[1ah]mov es:[1ch], bxstipop bxpop esretInit8259:; cmp cs:Copies, &#39;1&#39;; jz @@1; ret@@1:cmp cs:MachineID, 0fchja @@pc_xt@@AT:mov bx,870h ;mov al,0 ;out 0F1h,al ;jcxz $+2jcxz $+2mov al,11h ; ICW1out 0A0h,aljcxz $+2jcxz $+2out 20h,aljcxz $+2jcxz $+2mov al,bl ; ICW2out 0A1h,aljcxz $+2jcxz $+2mov al,bhout 21h,aljcxz $+2jcxz $+2mov al,2 ; ICW3out 0A1h,aljcxz $+2jcxz $+2mov al,4out 21h,aljcxz $+2jcxz $+2mov al,1 ; ICW4out 0A1h,aljcxz $+2jcxz $+2out 21h,aljcxz $+2jcxz $+2mov al,0FFh ; OCW1out 0A1h,aljcxz $+2jcxz $+2out 21h,alret@@PC_XT:mov al,13h ; ICW1out 20h,aljcxz $+2jcxz $+2mov al,8 ; ICW2out 21h,aljcxz $+2jcxz $+2mov al,9 ; ICW4out 21h,aljcxz $+2jcxz $+2mov al,0FFh ; OCW1out 21h,alretEnable8259:mov ax, word ptr cs:old_8259out 021h,aljcxz $+2jcxz $+2mov al,ahout 0a1h,al ; DEC PC Bus Mouseret ; July 1994 by Mr. Lei; -------------------------------------------------------------------------RestoreBiosData:lodswcmp ax, &#39;--&#39;jz @@1call Beepret@@1: push espush dimov di, 40hmov es, dimov di, 10hmovswmov di, 0a8h ; [40h:a8h]movswmovswmov di, 49hmov cx, 1dhrep movsbmov di, 0f0h ; User datamov cx, 8rep movswpop dipop esret; -------------------------------------------------------------------------RestoreMCB:push dspush eslodsw ; &#39;MZ&#39;@@0: lodswcmp ax, &#39;MM&#39;jz @@1mov es,axxor di,dimovsbmovswmovswinc axmov bx, dscmp ax, bxjz @@10mov byte ptr es:[8], 0 ; Aug 24, 1993@@10: cmp byte ptr es:[0], &#39;Z&#39;jnz @@0mov byte ptr es:[10h], 0jmp @@0@@1:pop espop dsret; -------------------------------------------------------------------------CloseFiles:mov ax, 5 ; Begin handlepush dspush simov cx, 15 ; Max handlesub cx, axinc cxmov bx, ax@@1: push bxpush cxmov ah, 3ehint 21hpop cxpop bxinc bxloop @@1pop sipop dsret; -------------------------------------------------------------------------RestorePort:mov di, 40h ; restore portmov es, dixor di, dimov cx, 8rep movswret; -------------------------------------------------------------------------RestoreLEDs:lodsband al, 11110000b ; LED statusmov ah, es:[17h]and ah, 00001111bor ah, aland ah, 0f0h ; Clear CTRL ALT SHIFTmov es:[17h], ahret; -------------------------------------------------------------------------RestoreEnvStr:lodswpush sipush dipush dspush esmov es, cs:DosEnvmov ds, axxor si, simov di, si@@0: lodsbor al, aljnz @@1 cmp byte ptr ds:[si], 0jz @@2@@1: stosbjmp @@0@@2: stosbstosbpop espop dspop dipop siret; -----------------------------------------------------------------------RestoreVecList:xor ax,axmov di,axmov es,axmov cx,100h@@0: lodswxchg dx, axlodswcmp dx, &#39;EL&#39;jnz @@1 cmp al, &#39;I&#39;jnz @@1sub cl, ahpush cxmov cl, ahmov ax, es:[di-4]mov dx, es:[di-2]@@a: stoswxchg ax, dxstoswxchg ax, dxloop @@apop cxor cx, cxjz @@9jmp @@0@@1:xchg ax, dxstoswxchg ax, dxstoswloop @@0@@9:ret;----------------------------------------------------------------------------RestoreFloppyParam: ; Mr. Lei 2/10/1992push espush axxor ax, axmov es, axmov byte ptr es:[525h], 2pop axpop esret;---------------------------------------------------------------------------RestoreCVTchain:lodswcmp ax, &#39;VC&#39;jz @@_0call Beepret@@_0:push axpush cxpush es; -----------------------------------------------------------------lodsw ; DPBmov di, axlodswmov es, ax@@1: lodsbinc distosbadd di, cs:cvtOfsadd di, 10hmovswmovswles di, es:[di+2]cmp di, -1jnz @@1; -----------------------------------------------------------------lodsw ; DCBmov di, axlodswmov es, axxor ax, axdec axstosw; -----------------------------------------------------------------lodsw ; Device Driver Chainmov di, axlodswmov es, axxor cx, cx@@9: push dimov cl, 5rep movswpop diles di, es:[di]mov ax, diinc axjnz @@9pop espop cxpop axret; ----------------------------------------------------------------------------RestoreMemoryManager:test cs:Status, XMSbitjz @@1call LoadXMSstatus@@1:test cs:Status, EMSbitjz @@2call LoadEMSstatus@@2:retLoadEMSstatus:lodswcmp ax, &#39;ME&#39;jz @@_0call Beepret@@_0:lodswmov cx, axxor dx, dx@@_1: push dspush sipush dxpush cx@@0: cmp dx, ds:[si]jz @@1add si, 4loop @@0push cxmov cx, 5@@0: mov ah, 45h ; Deallocate Handle and Memoryint 67hor ah, ahjz @@1loop @@0@@1: pop cx@@1:pop cxpop dxpop sipop dsinc dxcmp dx, 100hjb @@_1shl cx, 1shl cx, 1add si, cxretLoadXMSstatus:lodswcmp ax, &#39;MX&#39;jz @@_0call Beepret@@_0:lodswmov cx, axjcxz @@5@@1:lodswmov dx, ax@@2: push dxmov ah, 0ah ; freecall dword ptr cs:xms_controlor ax, axpop dxjnz @@4 cmp bl, 0abhjnz @@4push dxmov ah, 0dh ; unlockcall dword ptr cs:xms_controlor ax, axpop dxjmp @@2@@4: loop @@1@@5: retendp; -----------------------------------------------------------------------CloseSpeaker:in al, 61hand al, 0fchout 61h, alret; -----------------------------------------------------------------------RestoreClockSpeed:mov al, 00110110bout 43h, alxor ax, axout 40h, alout 40h, alret; -----------------------------------------------------------------------ResetDisk:xor ax, axxor dx, dxint 13h ; Restore Ainc dxint 13h ; Restore Bmov dl, 80hint 13h ; Restore Cret; --------------------------------------------------------------------------ClosePRN:mov ah, 51h ; Get PSP segint 21hmov es, bxmov ax, es:[16h] ; Prev PSP segcmp ax, bxjnz @@9mov ax, 3e00h ; COMMANDmov bx, 4 int 21h@@9:retInitPRN:mov ax, 3e00hmov bx, 4 ; PRNint 21hmov ax, 3d01hmov dx, offset PRNnamepush cspop dsint 21hretPRNname db &#39;PRN&#39;,0InitMouse: ; 2/16/1993 by Mr. Leipush esxor ax, axmov es, axcmp word ptr es:[33h4+2], 0jz @@0 cmp word ptr es:[33h4], 0jz @@0mov ax, 21hint 33h ; Hook Mouse Interrupt@@0: pop esret; ------------- CMOS CLOCK set to System -----------------------------------UpdateTime:call GetRealTimemov ah, 2dhint 21hretGetRealTime:mov ah,2 int 1Ahmov al,chcall bcdxchgmov ch,almov al,clcall bcdxchgmov cl,almov al,dhcall bcdxchgmov dh,almov dl,0retBCDxchg:push axpush cxmov cl,4shr al,clpop cxmov bl,0Ahmul blpop bxand bl,0Fhadd al,blret; -----------------------------------------------------------------------; Display stringColorPrintStr:lodsbmov bh, al ; colorxor cx, cxmov dx, 014fhmov ax, 0600hint 10hmov ah, 02 ; GotoXY (0, 0)xor dx, dxmov bh, 0 int 10hPrintStr:push cspop dsxor bx, bx@@1: lodsbcmp al, &#39;$&#39;jz @@2or al, aljz @@2mov ah, 0ehint 10hjmp short @@1@@2: mov al, cs:clsStrcolormov cs:clsStr, alret; -----------------------------------------------------------------------Self dw 0clsStrcolor db 17hclsStr db 17h ; Color (White in Blue)db &#39; RAMinit Version 2.12 (c) 1989-1994 by KingSoft Ltd. Mr. Leijun&#39;db 0dh,0ahdb &#39; [&#39;ShowCopies db &#39;&#39;db &#39;] Activate...&#39;,0ah,0dh,&#39;$&#39;endTSR equ $mcbList equ offset endTSR + 2 + 2vecList equ mcbList + 710 + 2 + 10h + 1 + 400hdevLink equ vecList + 4 + 5  26 + 4 + 10  30h + 4xmsList equ devLink + 2 + MaxHandles  2emsList equ xmsList + 4 + 1024crtMode equ emsList + 2 + 1Dh + 4 + 10htsrLen equ crtMode + 1;; DOS Environment Reserved by RI; --------------------------------------------------; Flag &#39;XX&#39; 2 bytes; Environment Segment 1 word; Free MCBs &lt;=710 bytes; MCB segment 1 word; MCB 5 bytes; End flag &#39;MM&#39; 1 word; COM LPT ports 10h bytes; LEDs status 1 bytes; Packed vectors list &lt;=400h bytes; Flag &#39;CV&#39; 2 bytes; CVT First DPB pointer 4 bytes; DPBs data &lt;=526 bytes; First DCB pointer 4 bytes; Pointer to NUL 4 bytes; All device driver datas &lt;=30h10 bytes; Flag &#39;XM&#39; 2 bytes; XMS free handle counter 2 bytes; EMS free handle list &lt;=100h4 bytes; Flag &#39;EM&#39; 2 bytes; EMS free handle counter 2 bytes; EMS free handle list &lt;=1024 bytes; EMS handle 1 word; Number of pages 1 word; Flag &#39;--&#39; 1 word; Equipment List 1 word; CRT 40:49h-66h 1dh bytes; 40:A8h 1 dword; BIOS User Data Area 40:F0--FF 10h bytes; **;main: jmp main0Print Macro StrLea dx, Strcall DisplayStrendmInstMsg db &#39;RAMinit Version 2.12 &#39;db &#39;Copyright (c) 1989-1994 by KingSoft Ltd. &#39;,0dh,0ah,&#39;$&#39;Msg0 db &#39;Already installed !&#39;,0dh,0ah,0ahdb &#39;For Help, type &quot;RI /?&quot;. &#39;,0dh,0ah,&#39;$&#39;Msg_0 db 0ah,&#39;Residents a new RAMinit copy [y/n] ? $&#39;Msg_2 db &#39;OK, RI No.&#39;Msg_RI db &#39;2&#39;db &#39; residents successful !&#39;, 0dh,0ah,&#39;$&#39;Msg1 db &#39;Activate with: $&#39;KeyMsg db &#39;Right_Shift$&#39;db &#39;Left_Shift$ &#39;KMsg1 db &#39;Left_Ctrl$ &#39;db &#39;Left_Alt$ &#39;db &#39;Right_Ctrl$ &#39;db &#39;Right_Alt$ &#39;KMsg2 db &#39;Ctrl$ &#39;db &#39;Alt$ &#39;db &#39;Ctrl$ &#39;db &#39;Alt$ &#39;PlusMsg db &#39; + $&#39;crlf db 0dh,0ah,&#39;$&#39;HelpMsg db &#39;Programmed by Mr. Leijun Dec 1992&#39;, 0dh,0ah,0ahdb &#39;Usage: RI [options]&#39;,0dh,0ah,0ahdb &#39;/H,/? Display this screen&#39;,0dh,0ahdb &#39;/CLS Removes all TSR programs after current RI&#39;,0dh,0ahdb &#39;/RET Removes TSR programs include current RI&#39;,0dh,0ahdb &#39;/NEW Residents a new data copy of current environment&#39;,0dh,0ahdb &#39;/ALL Removes all RI copies and all other tsr programs&#39;,0dh,0ahdb &#39;/Sxyy.. Define Hotkey x=AuxHotkey yy..=shift status&#39;,0dh,0ahdb &#39; x=auxiliary hotkey (default is &quot;X&quot;) &#39;,0dh,0ahdb &#39; x equ &quot;1&quot; means need AuxHotkey&#39;,0dh,0ahdb &#39; yy..=shift status [CAScas]&#39;,0dh,0ahdb &#39; C: Left Ctrl A: Left Alt S: Left Shift&#39;,0dh,0ahdb &#39; c: Right Ctrl a: Right Alt s: Right Shift&#39;,0dh,0ah,0ahdb &#39;Example: &quot;RI /S1c&quot; means Hotkey is Right_Ctrl+X&#39;,0dh,0ahdb &#39; &quot;RI /S0Cc&quot; means HotKey is Left_Ctrl+Right_Ctrl&#39;,0dh,0ahdb &#39; &quot;RI /CLS&quot; equals simply press hotkey&#39;,0dh,0ahdb &#39; &quot;RI /RET&quot; Removes all TSRs after current RI and this RI&#39;,0dh,0ahdb 0ahdb &#39;Contact me for RAMinit problems: (01)2561155 Call 1997&#39;,0dh,0ahdb &#39;$&#39;ErrMsg db &#39;ERROR: Invalid options !&#39;,0dh,0ah,0ah,&#39;$&#39;WinErr db 7, &#39;Sorry, I cannot work in Windows DOS environment.&#39;,0dh,0ah,&#39;$&#39;SetMsg db 7, &#39;Defines new Hotkey successful !&#39;,0dh,0ah,0ah,&#39;$&#39;tsrOK db FalseMain0:cldPrint instMsgcall IsWinDosor ax, axjz @@1Print WinErrmov ax, 4c00hint 21h@@1:call HotKeyValidmov cs:Status, 0call EMS_testcall CmpDosVercall CmpSideKickcall GetMachineIDcall ModifyHotKeyPromptmov ax, 0c0d7hint 2fhmov es, axcmp word ptr es:[101h], &#39;IE&#39; ; &#39;LEI&#39;jnz @@0mov cs:Self, ax@@0:call CmdLinecall PrintHotKeyPromptcmp cs:tsrOK, truejz @@2call tsrReplyOK@@2: cmp cs:tsrOK, truejnz @@_2call PrintCopies@@_2:mov word ptr cs:[100h], &#39;EL&#39;mov byte ptr cs:[102h], &#39;I&#39;push cspop espush cspop dsstdmov si, offset eofmov cx, eof - offset Heremov di, tsrLenadd di, cxinc cxrep movsbcldmov bx, tsrLenjmp bxHere:mov ax,csmov es,axmov di,offset endTSRmov cs:DataBegin, dimov cs:NextDataSeg, -1mov ax, &#39;XX&#39;stoswin al, 0a1hmov ah, alin al, 21hpush axmov word ptr cs:old_8259, axxor ax, axout 21h,al ; CLIcall SaveOtherscall SetSelfIntcall BackupVecListcmp cs:Power, truejnz @@20call BackupCVTchaincall BackupMemoryManager@@20:call BackupBiosDatastimov cs:Flag, &#39; &#39; ; no busymov cs:StopFlag, 0 ;mov cs:tsrLength, dicall SetDosEnvSegcmp cs:Self, 0jz @@29push cspop dspush cspop escldmov cx, cs:tsrLengthmov si, cs:DataBeginsub cx, simov di, 120hmov cs:DataBegin, direp movsbmov cs:tsrLength, di@@29:pop axout 21h, al ; STImov al, ahout 0a1h, almov dx, cs:tsrLengthinc dxint 27h; ----------------------------------------------------------------------------SetDosEnvSeg:push dspush esmov ax, cs@@10: mov es, axmov ax, es:[16h] ; Get father process psp segmentor ax, axjz @@11mov bx, escmp ax, bxjnz @@10@@11:mov es, word ptr es:[2ch] ; Get father process env segmentmov cs:DosEnv, espop espop dsret; ----------------------------------------------------------------------------SaveOthers:mov ax, cs:[2ch] ; Env Segstoswcall backupMCB ; Current MCBmov ax, 40h ; COM LPT Portmov ds, axmov si, 0hmov cx, 8rep movswmov si, 17h ; LED statuslodsbstosb; call OpenLEDsret; --------------------------------------------------------------------------backupMCB:mov ax, &#39;ZM&#39;stoswpush dspush esmov ah, 52hint 21h ; Get MCB chain headmov ax, es:[bx-2]pop es@@0: mov ds, axcmp byte ptr ds:[0], &#39;Z&#39; ; End ?jz @@20 cmp byte ptr ds:[0], &#39;M&#39; ; Memory control blockjnz @@30 cmp word ptr ds:[3], 0 ; Nul mcbjz @@10 cmp word ptr ds:[1], 0 ; Free MCBjnz @@10call SaveFreeMCB@@10: inc axadd ax, ds:[3]jmp @@0@@20:call SaveFreeMCBcmp ax, 0a000hinc axjnb @@30mov ax, 9fffh ; MS-DOS UMBjmp @@0@@30:cmp ax, 0c000h ; 386MAXja @@90mov ax, 0c020hjmp @@0@@90: ; Error ?pop dsmov ax, &#39;MM&#39; ; Set MCB flagstoswretSaveFreeMCB:stoswxor si,simovsbmovswmovswret;; push ax; stosw; xor si,si; movsb; movsw; movsw; pop ax; cmp ax, 09fffh; jnb @@3; push ax; push ds; mov ds,ax; cmp byte ptr ds:[0], &#39;M&#39;; pop ds; pop ax; jnz @@4; mov ax, 09fffh ; MS-DOS UMB; jmp @@0; @@4: cmp ax, 0c000h; ja @@3; mov ax, 0c020h ; 386MAX; jmp @@0;; --------------------------------------------------------------------------OpenLEDs: push ax ; Open all LEDsor al, 070hmov ds:[17h], almov ah, 1 int 16hmov cx, 4 ; Delay@@20: push cxxor cx, cx@@21: loop @@21pop cxloop @@20pop axmov ds:[17h], almov ah, 1 int 16hret; --------------------------------------------------------------------------SetSelfInt:push espush dicmp cs:self, 0jnz @@1push cspop dsmov ax,3509hint 21hmov word ptr cs:oldInt9_addr,bxmov word ptr cs:oldInt9_addr[2],esmov dx,offset NewInt9mov ax,2509hint 21hmov ax,352Fhint 21hmov word ptr cs:oldInt2F_addr,bxmov word ptr cs:oldInt2F_addr[2],esmov dx,offset newInt2Fmov ax,252Fhint 21hmov ax,351Chint 21hmov word ptr cs:oldInt1C_addr,bxmov word ptr cs:oldInt1C_addr[2],esmov dx,offset newInt1Cmov ax,251chint 21hclijmp @@2@@1:mov es, cs:Selfinc es:Copies@@_0: cmp es:NextDataSeg, -1jz @@_1mov es, es:NextDataSegjmp @@_0@@_1: mov es:NextDataSeg, cs@@2:pop dipop esret; -----------------------------------------------------------------------SaveCounter:mov word ptr es:[di], &#39;EL&#39;mov byte ptr es:[di+2], &#39;I&#39;mov byte ptr es:[di+3], blxor bx, bxadd di, 4ret; -----------------------------------------------------------------------DisplayStr: push cspop dsmov ah, 9 int 21hret; -----------------------------------------------------------------------CmdLine:push cspop dsxor ax, axmov si, 80hlodsbor al, aljnz @@1ret@@1:mov cx, axdec axpush axpush si@@0: lodsbcmp al, &#39; &#39;jz @@0 cmp al, &#39;/&#39;jnz @@2lodsbcmp al, &#39;S&#39;jz @@_2cmp al, &#39;s&#39;jnz @@2@@_2:call SetHotKeyPrint SetMsgmov ax, 4c00hint 21h@@2:pop sipop axpush axpush si@@_3: lodsbcmp al, &#39;A&#39;jb @@3 cmp al, &#39;Z&#39;ja @@3add byte ptr ds:[si-1],20h ; DownCase@@3: loop @@_3pop sipop cxadd si, cxlodsbcmp al, &#39;s&#39; ; CLSjnz @@5 cmp word ptr ds:[si-3], &#39;lc&#39;jnz @@5 cmp cs:Self, 0jz @Errmov ax, 0c0d7h+1 int 2fh@@5: cmp al, &#39;h&#39; ; HELPjz @helpcmp al, &#39;?&#39;jz @helpcmp al, &#39;t&#39; ; RETjnz @@6 cmp word ptr ds:[si-3], &#39;er&#39;jnz @@6@@7:cmp cs:Self, 0jz @Errmov ax, 0c0d7h+2 int 2fh@@6: cmp al, &#39;w&#39; ; NEWjnz @@8 cmp word ptr ds:[si-3], &#39;en&#39;jnz @@8mov cs:tsrOK, trueret@@8:cmp al, &#39;l&#39; ; ALLjnz @@9 cmp word ptr ds:[si-3], &#39;la&#39;jnz @@9mov ax, 0c0d7h+3 int 2fh@@9:cmp al, &#39; &#39;jnz @Errret@Err:Print ErrMsg@help:Print HelpMsgmov ax, 4c00hint 21h;---------------------------------------------------------------------------tsrReplyOK:cmp cs:Self, 0jz @@1Print Msg0push esmov ax, cs:Self@@_10: mov es, axmov ax, es:NextDataSegcmp ax, -1jnz @@_10mov ax, es@@_0: push axdec axmov es, axmov bx, es:[3]pop axadd ax, bxinc axmov es, axcmp word ptr es:[0], &#39;OC&#39;jz @@_0mov bx, cscmp ax, bxpop esjz @@2Print Msg_0mov ah, 1 int 21hpush axPrint crlfpop axcmp al, &#39;y&#39;jz @@3 cmp al, &#39;Y&#39;jz @@3@@2: ; Print Msg_1mov ax, 4c01hint 21h@@3:@@1: mov cs:tsrOK, trueretPrintCopies:cmp cs:Self, 0jz @@1push es ; Added -by- Mr. Leimov es, cs:Self ; Aug 24, 1993mov al, es:Copiesinc al ; Total RI copiespush ax ; Set es = current mcbmov ax, csdec axmov es, axpop axmov cx, 5 ; Search end of file namemov bx, 8@@10: inc bxcmp byte ptr es:[bx], 20hjz @@20 cmp byte ptr es:[bx], 0ffhjz @@20 cmp byte ptr es:[bx], 00hjz @@20loop @@10@@20: ; Set current RI nomov byte ptr es:[bx], &#39;:&#39; ; &quot;RI:2&quot;mov byte ptr es:[bx+1], alcmp bx, 8+7jnb @@30mov byte ptr es:[bx+2], 0@@30:pop esmov cs:Msg_RI, alPrint Msg_2@@1: ret;---------------------------------------------------------------------------; Backup Interrupt Vector List;BackupVecList:push dspush cspop esxor si,si ; Vectorsmov ds,simovswmovswxor bx, bxmov cx,00ffh@@0: lodswxchg dx, axlodswcmp ax, es:[di-2]jnz @@1 cmp dx, es:[di-4]jz @@2@@1: or bx, bxjz @@3call SaveCounter@@3: xchg dx, axstoswxchg dx, axstoswloop @@0jmp @@4@@2: inc bxloop @@0call SaveCounter@@4:pop dsret;;-----------------------------------------------------------------------------BackupCVTchain:mov ax, &#39;VC&#39;stoswpush axpush bxpush cxpush dspush esmov ah, 52hint 21h ; ES:BX -- DOS table as described below; --------------------------------------------------------------------push es ; DPB chainspush bxlds si, es:[bx]push cspop esmov ax, sistoswmov ax, dsstoswmov bx, cs:cvtOfsxor cx, cx@@1: mov al, ds:[si+1]stosbmov ax, ds:[si+bx+12h]stoswmov ax, ds:[si+bx+14h]stoswinc cxlds si, ds:[si+bx+18h]cmp si, -1jnz @@1; mov ax, 5; mul cl; add ax, 4; add cs:tsrLength, axpop bxpop es; --------------------------------------------------------------------push es ; DCB file control blockspush bxles bx, es:[bx+4]@@11: cmp word ptr es:[bx], -1jz @@10les bx, es:[bx]jmp @@11@@10:mov ax, esxchg ax, bxpush cspop esstoswxchg ax, bxstoswpop bxpop es; add cs:tsrLength, 4; ---------------------------------------------------------------------push es ; Device Driver Chainspop dsadd bx, 22hmov si, bx ; NULpop esmov ax, sistoswmov ax, dsstoswxor cx, cxxor bx, bx@@9: push simov cl, 5rep movswinc bxpop silds si, ds:[si]mov ax, siinc axjnz @@9pop dspop cxpop bxpop axret; ----------------------------------------------------------------------------BackupBiosData:mov ax, &#39;--&#39;stoswpush dspush simov si, 40hmov ds, simov si, 10hmovswmov si, 0a8hmovswmovswmov si, 49hmov cx, 1dhrep movsbmov si, 0f0hmov cx, 8rep movswpop sipop dsret; ---------------------------------------------------------------------------BackupMemoryManager:push cspop espush dspush escall SaveXMSstatuscall SaveEMSstatuspop espop dsret;---------------------------------------------------------------------SaveEMSstatus:test cs:status, EMSbitjnz @@1ret@@1:mov ax, &#39;ME&#39;stoswinc diinc dipush dimov ah, 4dhint 67hpop dimov es:[di-2], bxshl bx, 1shl bx, 1add di, bxret; -------------------------------------------------------------------SaveXMSstatus:call XMS_testtest cs:status, XMSbitjnz @@1ret@@1:mov ax, &#39;MX&#39;stoswmov dx, 1call XMS_allocjnz @@_1xor cx, cx ; XMS alloc failurestoswret@@_1:push dxsub dx, MaxHandles  10@@2:push dxcall XMS_Lockpop dxjnz @@3 cmp bl, 0a2hjnz @@4add dx, 10jmp @@2@@3: push dxcall XMS_unlockpop dx@@4:mov cs:handle_begin, dxpop dxpush dxcall XMS_bstatxor cx, cxmov cl, blinc cxpop dxcall XMS_Freemov dx, cs:Handle_beginpush cxpush cspop esmov ax, cxstosw@@5: push dxcall XMS_Lockpop dxjnz @@6 cmp bl, 0a2h ; Handle invalidjz @@7@@6: call XMS_unlockadd dx, 10jmp @@5@@7: mov ax, dxstoswadd dx, 10loop @@5pop cxret; ------------------------------------------------------------------XMS_test:push esmov ax, 4300hint 2fhcmp al, 80hjnz @@9mov ax, 4310hint 2fhmov cs:XMS_control, bxmov cs:XMS_control[2], esor cs:Status, XMSbit@@9:pop esretXMS_stat:mov ah, 0call dword ptr cs:xms_controlmov hma_exist, dlrethma_exist db 0XMS_alloc:mov ah, 9call dword ptr cs:xms_controlor ax, axretXMS_lock:mov ah, 0chcall dword ptr cs:xms_controlor ax, axretXMS_unlock:mov ah, 0dhcall dword ptr cs:xms_controlor ax, axretXMS_bstat:mov ah, 0ehcall dword ptr cs:xms_controlor ax, axretXMS_free:mov ah, 0ahcall dword ptr cs:xms_controlor ax, axret; ----------------------------------------------------------------------------EMS_test:push cspop dsmov dx, offset EMMnamemov ax, 3d00hint 21hjc @@2mov bx, axmov ah, 3ehint 21hor cs:Status, EMSbit@@2:retEMMname db &#39;EMMXXXX0&#39;,0; -----------------------------------------------------------------------------SetHotKey:xor bx, bxlodsbpush ax@@1: lodsbcmp al, 0dhjz @@9 cmp al, &#39;C&#39;jnz @@2or bl, LeftCtrljmp @@1@@2:cmp al, &#39;c&#39;jnz @@3or bl, RightCtrljmp @@1@@3:cmp al, &#39;A&#39;jnz @@4or bl, LeftAltjmp @@1@@4:cmp al, &#39;a&#39;jnz @@5or bl, RightAltjmp @@1@@5:cmp al, &#39;S&#39;jnz @@6or bl, LeftShiftjmp @@1@@6:cmp al, &#39;s&#39;jnz @@7or bl, RightShiftjmp @@1@@7: pop axjmp @Err@@9:mov cs:HotKey, blpop axmov cs:AuxHotKey, 2dh ; &#39;X&#39; scan keycmp al, &#39;1&#39;jz @@29mov cs:AuxHotKey, 0@@29:cmp cs:Self, 0jz @@30push esmov es, cs:Selfmov es:HotKey, blmov bl, cs:AuxHotKeymov es:AuxHotKey, blpop es@@30:call GetRunFileNamemov ax, 3d02hint 21hjc @@10push cspop dsmov bx, axmov cx, 4mov dx, 100hmov ah, 40hint 21hjc @@10mov ax, 4200hxor cx, cxmov dx, 17hint 21hjc @@10mov cx, 1mov dx, offset AuxHotKeymov ah, 40hint 21hjc @@10mov ah, 3ehint 21h@@10:ret; -----------------------------------------------------------------------GetRunFileName:; Return:; DS:DX Pointer of this run file name ASCIIZ stringpush axpush bxpush cxpush sipush dipush espush cspop esmov ax, es:[2ch]mov es, axxor di, dimov cx, 1000hxor al, al@@1: repnz scasbcmp es:[di], alloopnz @@1mov dx, diadd dx, 3push espop dspop espop dipop sipop cxpop bxpop axret; ---------------------------------------------------------------------------GetMachineID:push esmov KBD102,Truemov ax,40hmov es,axtest byte ptr es:[96h], 00010000bjnz @@1mov Kbd102,False@@1:xor ax,axdec axmov es,axmov al,es:[0eh]mov cs:MachineID, alpop esret; ---------------------------------------------------------------------------ModifyHotKeyPrompt:cmp cs:Kbd102, Truejz @@9push cspop espush cspop dsmov cx, 124mov si, offset KMsg2mov di, offset KMsg1rep movsb@@9: cmp cs:MachineID, 0fchjna @@10mov cs:clsStrcolor, 70h ; Monomov cs:clsStr, 70h@@10:ret; ---------------------------------------------------------------------------PrintHotKeyPrompt:Print Msg1mov al, cs:HotKeymov ah, alshr al, 1shr al, 1and ax, 33chor al, ahmov dx, offset KeyMsg@@40:or ax, ax ; Mr. Lei 4/25/1993jz @@_42shr al, 1push axjnc @@41push axcall ColorDisplayStr; mov ah, 9; int 21hpop axor al, aljz @@42push dxmov dx, offset PlusMsgcall ColorDisplayStr; Print PlusMsgpop dx@@41: add dx, 12pop axjmp @@40@@42: pop ax@@_42: cmp cs:AuxHotKey, 0jz @@43 cmp cs:HotKey, 0 ; Mr. Leijz @@_43mov dx, offset PlusMsgcall ColorDisplayStr; Print PlusMsg@@_43: mov dx, offset AuxHotKeyNamecall ColorDisplayStr; Print AuxHotKeyName@@43:Print crlfretColorDisplayStr:push bxpush cxpush dxpush simov bl, 0fhmov si, dxxor bh, bhmov cx, 1@@1: lodsbcmp al, &#39;$&#39;jz @@2or al, aljz @@2push cxmov ah, 09hint 10hmov ah, 3 int 10hinc dlmov ah, 2 int 10hpop cxjmp short @@1@@2:pop sipop dxpop cxpop bxret; ---------------------------------------------------------------------------CmpSideKick:xor ax, axmov es, axles bx, es:[20h]cmp word ptr es:[bx-4], 4b53hjnz @@1 cmp word ptr es:[bx-2], 4942hjz @@2@@1: mov es, axles bx, es:[94h]cmp word ptr es:[bx-2], 4b53hjz @@2ret@@2: or cs:Status, SKbitret; ---------------------------------------------------------------------------CmpDosVer: mov ah, 30hint 21hcmp al, 3jb @@1 cmp al, 3jna @@2mov cs:cvtOfs, 1ret@@2: mov cs:cvtOfs, 0ret@@1: Print DosVerErrmov ax, 4cffhint 21hDosVerErr db &#39;Sorry, DOS version too lower !&#39;,0dh,0ah,&#39;$&#39;HotKeyValid:cmp cs:HotKey, 0jnz @@_1cmp cs:AuxHotKey, 0jnz @@_1Print HotKeyErrmov ax, 4cfehint 21h@@_1: retHotKeyErr db &#39;Sorry, please setup hotkey again. &#39;,0dh,0ah,&#39;$&#39;eof:endsend Start; ------------- The End ! ---------------------------------------------------</code></pre>]]></content>
      
      <categories>
          
          <category> Default </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> 雷军 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>链表的头插法和尾插法</title>
      <link href="/2016/09/22/insert-to-head-and-tail-of-linklist/"/>
      <content type="html"><![CDATA[<p>头插法：每次都在头节点后面插入新元素，得到的是倒序的序列<br>尾插法：每次都在最后一个节点后面插入新元素，需要一个指针来保存最后一个节点的地址</p><p>以下是C语言实现链表的头插法和尾插法。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">TailCreatList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//尾插法建立链表  </span><span class="token punctuation">{</span>      List <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s用来指向新生成的节点。r始终指向L的终端节点。  </span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//r指向了头节点，此时的头节点是终端节点。  </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> List<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> List<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s指向新申请的节点  </span>        s<span class="token operator">-></span>data <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用新节点的数据域来接受i  </span>        r<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用r来接纳新节点  </span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//r指向终端节点  </span>    <span class="token punctuation">}</span>      r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//元素已经全部装入链表L中  </span>    <span class="token comment" spellcheck="true">//L的终端节点指针域为NULL，L建立完成  </span><span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">HeadCreatList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//头插法建立链表  </span><span class="token punctuation">{</span>      List <span class="token operator">*</span>s<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//不用像尾插法一样生成一个终端节点。  </span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> List<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> List<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          s<span class="token operator">-></span>data <span class="token operator">=</span> i<span class="token punctuation">;</span>          s<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将L指向的地址赋值给S;//头插法与尾插法的不同之处主要在此，  </span>                           <span class="token comment" spellcheck="true">//s所指的新节点的指针域next指向L中的开始节点  </span>        L<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//头指针的指针域next指向s节点，使得s成为开始节点。  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
